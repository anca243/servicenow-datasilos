<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_datasilos.RecordDistributeVisibilityToRelatedRecords</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Distributes the visibility of the given record to all related records.</description>
        <mobile_callable>false</mobile_callable>
        <name>RecordDistributeVisibilityToRelatedRecords</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function RecordDistributeVisibilityToRelatedRecords(record)
{
	var GetArrayValue = x_snc_devtools.GetArrayValue;
	var GetBoolValue = x_snc_devtools.GetBoolValue;
	var GetIntegerValue = x_snc_devtools.GetIntegerValue;

	var aSupervisorSiloWhitelist = GetArrayValue(RecordGetSupervisorWhitelistValue(record));
	var aFulfillerSiloWhitelist = GetArrayValue(RecordGetFulfillerWhitelistValue(record));
	var aGroupWhitelist = GetArrayValue(RecordGetGroupWhitelistValue(record));
	
	var aRelatedRecords = GetRelatedRecords(record);
	
	for (var nIndex = 0; nIndex < aRelatedRecords.length; nIndex++)
	{
		// Only apply changes to non-ghost records!
		if (RecordGetGhostValue(aRelatedRecords[nIndex]) == false)
		{
			var nChanges = 0;

			// Global visibility
			if (RecordGetGlobalValue(record) == true)
			{
				RecordSetGlobalValue(aRelatedRecords[nIndex],true);
				nChanges++;
			}

			// Supervisor Silo Whitelist
			aSupervisorSiloWhitelist.forEach( function(strSiloSysId)
			{
				if (RecordAddSiloToSupervisorWhitelist(aRelatedRecords[nIndex],strSiloSysId))
				{
					nChanges++;
				}
			});

			// Fulfiller Silo Whitelist
			aFulfillerSiloWhitelist.forEach( function(strSiloSysId)
			{
				if (RecordAddSiloToFulfillerWhitelist(aRelatedRecords[nIndex],strSiloSysId))
				{
					nChanges++;
				}
			});
			
			// Group Whitelist
			aGroupWhitelist.forEach( function(strGroupSysId)
			{
				if (RecordAddGroupToWhitelist(aRelatedRecords[nIndex],strGroupSysId))
				{
					nChanges++;
				}
			});


			// Security Clearance
			var nSecurityClearance = RecordGetSecurityClearanceValue(record);
			if (nSecurityClearance > RecordGetSecurityClearanceValue(aRelatedRecords[nIndex]))
			{
				RecordSetSecurityClearanceValue(aRelatedRecords[nIndex],nSecurityClearance);
				nChanges++;
			}

			// Only invoke update if there is the need!
			if (nChanges > 0)
			{
				aRelatedRecords[nIndex].update();
			}		
		}
	}	
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-09-22 12:27:33</sys_created_on>
        <sys_id>461a72531b975090a89720a8ec4bcb85</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>RecordDistributeVisibilityToRelatedRecords</sys_name>
        <sys_package display_value="DataSilos WORK IN PROGRESS" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy/>
        <sys_scope display_value="DataSilos WORK IN PROGRESS">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_script_include_461a72531b975090a89720a8ec4bcb85</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-02 14:17:35</sys_updated_on>
    </sys_script_include>
</record_update>
