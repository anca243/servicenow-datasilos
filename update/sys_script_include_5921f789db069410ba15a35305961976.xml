<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_datasilos.RecordUpdateWhitelistsFromGroupByTypes</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The function updates and extends the group and datasilos whitelisting based on the given group and the type of the datasilo-to-group associations. </description>
        <mobile_callable>false</mobile_callable>
        <name>RecordUpdateWhitelistsFromGroupByTypes</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function RecordUpdateWhitelistsFromGroupByTypes(record,strGroupSysId,aTypes)
{
	var RenderValue = x_snc_devtools.RenderValue;
	var GetStringValue = x_snc_devtools.GetStringValue;
	var GetArrayValue = x_snc_devtools.GetArrayValue;
	var IsValidSysId = x_snc_devtools.IsValidSysId;
	var ArrayUnique = x_snc_devtools.ArrayUnique;
	var GetValue = x_snc_devtools.GetValue;

	
	strGroupSysId = GetStringValue(strGroupSysId);
	aTypes = GetArrayValue(aTypes);
	
	if (IsValidSysId(strGroupSysId))
	{
		RecordAddGroupToWhitelist(record,strGroupSysId);

		// Now add all groups of all silos of the given group
		var aUserSilos = GetSilosFromGroup(strGroupSysId);

		var aSupervisorSilosToAdd = [];
		var aFulfillerSilosToAdd = [];
		var aGroupsToAdd = [];
		
		if ((aUserSilos.length > 0) && (aTypes.length > 0))
		{
			for (var nType = 0; nType < aTypes.length; nType++)
			{
				var strType = GetStringValue(aTypes[nType]);
				
				if (strType == 'supervisor')
				{
					aSupervisorSilosToAdd = aUserSilos;
				}
				else if (strType == 'fulfiller')
				{
					aFulfillerSilosToAdd = aUserSilos;
				}
				else
				{
					var grSilosToGroups = new GlideRecord('x_snc_datasilos_m2m_groups_datasilos');
					grSilosToGroups.addQuery('type','=',strType);
					var queryGroups = grSilosToGroups.addQuery('datasilo','=',GetValue(aUserSilos,0));
					for (var nIndexSilo = 1; nIndexSilo < aUserSilos.length; nIndexSilo++) 
					{
						queryGroups.addOrCondition('datasilo','=',aUserSilos[nIndexSilo]);
					}
					grSilosToGroups.query();
					while (grSilosToGroups.next())
					{
						aGroupsToAdd.push(grSilosToGroups.getValue('group'));
					}
				}
			}
		}
	
		// Apply the silo's groups to the record's group whitelist
		for (var nIndexGroup = 0; nIndexGroup < aGroupsToAdd.length; nIndexGroup++)
		{
			RecordAddGroupToWhitelist(record,aGroupsToAdd[nIndexGroup]);
		}
		
		// Apply the fulfiller silos to the record's fulfiller silo whitelist
		for (var nIndexFulfillerSilo = 0; nIndexFulfillerSilo < aFulfillerSilosToAdd.length; nIndexFulfillerSilo++)
		{
			RecordAddSiloToFulfillerWhitelist(record,aFulfillerSilosToAdd[nIndexFulfillerSilo]);
		}	
	
		// Apply the supervisor silos to the record's supervisor silo whitelist
		for (var nIndexSupervisorSilo = 0; nIndexSupervisorSilo < aSupervisorSilosToAdd.length; nIndexSupervisorSilo++)
		{
			RecordAddSiloToSupervisorWhitelist(record,aSupervisorSilosToAdd[nIndexSupervisorSilo]);
		}
	}	
	return true;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-07-15 13:24:03</sys_created_on>
        <sys_id>5921f789db069410ba15a35305961976</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name>RecordUpdateWhitelistsFromGroupByTypes</sys_name>
        <sys_package display_value="DataSilos WORK IN PROGRESS" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="DataSilos WORK IN PROGRESS">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_script_include_5921f789db069410ba15a35305961976</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-07-26 06:54:13</sys_updated_on>
    </sys_script_include>
</record_update>
