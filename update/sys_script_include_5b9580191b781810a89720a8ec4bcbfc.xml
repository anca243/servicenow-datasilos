<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_datasilos.DataSilosTestDataAPI</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The class DataSilosTestDataAPI contains functions to create test data which is required for the many ATF tests that validate the DataSilos Application.</description>
        <mobile_callable>false</mobile_callable>
        <name>DataSilosTestDataAPI</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var DataSilosTestDataAPI = Class.create();
DataSilosTestDataAPI.prototype = Object.extendsObject(x_snc_devtools.TestDataAPI,
{
	
	GetAllData:function()
	{
		var result = {};
		
		result.sys_user = this.GetAllUsers();
		result.sys_user_group = this.GetAllGroups();
		result.sys_user_role = this.GetAllRoles();
		
		result.core_company = this.GetAllCompanies();
		result.ast_contract = this.GetAllContracts();
		
		result.incident = this.GetAllIncidents();
		result.incident_task = this.GetAllIncidentTasks();
		result.problem = this.GetAllProblems();
		result.problem_task = this.GetAllProblemTasks();
		result.change_request = this.GetAllChangeRequests();
		result.change_task = this.GetAllChangeTasks();
		result.sc_request = this.GetAllRequests();
		result.sc_req_item = this.GetAllRequestItems();
		result.sc_task = this.GetAllRequestTasks();
		
		result.cmdb_ci = this.GetAllConfigurationItems();
		
		result.sys_db_view = this.GetAllDatabaseViews();
		
		result.x_snc_datasilos_datasilos = this.GetAllDataSilos();
		
		return result;
	},
	
	
	CreateSilo:function(strName, aMemberGroupNames, aFulfillerGroupNames, aSupervisorGroupNames)
	{
		var Log = x_snc_devtools.Log;
		var RenderValue = x_snc_devtools.RenderValue;
		var strPrefix = this.GetPrefix();
		var GetStringValue = x_snc_devtools.GetStringValue;
		/*
		Log('DataSilos: CreateSilo: '+strName+' '
			+RenderValue(aMemberGroupNames)+' '
			+RenderValue(aFulfillerGroupNames)+' '
			+RenderValue(aSupervisorGroupNames));	
		*/
		strName = GetStringValue(strName);
		if (strName.length < 3)
		{
			//Log('DataSilos: CreateSilo: Silo name too short!');
			return false;
		}
		if (strName.length > 80)
		{
			//Log('DataSilos: CreateSilo: Silo name too long!');
			return false;
		}
		if (Array.isArray(aMemberGroupNames) == false)
		{
			aMemberGroupNames = [];
		}
		if (Array.isArray(aFulfillerGroupNames) == false)
		{
			aFulfillerGroupNames = [];
		}
		if (Array.isArray(aSupervisorGroupNames) == false)
		{
			aSupervisorGroupNames = [];
		}
		var grDataSiloToDelete = new GlideRecord('x_snc_datasilos_datasilos');
		grDataSiloToDelete.addQuery('name','=',strPrefix+strName);
		grDataSiloToDelete.query();
		grDataSiloToDelete.deleteMultiple();

		var grDataSilo = new GlideRecord('x_snc_datasilos_datasilos');
		grDataSilo.newRecord();
		grDataSilo.name = strPrefix+strName;
		var strDataSiloSysId = grDataSilo.insert();
		if (strDataSiloSysId == null)
		{
			//Log('DataSilos: CreateSilo: Create Silo "'+strName+'" failed!');
		}
		else
		{
			var grGroup = new GlideRecord('sys_user_group');
			var grDataSilosToGroups = new GlideRecord('x_snc_datasilos_m2m_groups_datasilos');
			aMemberGroupNames.forEach(function(strGroupName)
			{
				if (strGroupName != '')
				{
					if (grGroup.get('name',strPrefix+strGroupName))
					{
						grDataSilosToGroups.initialize();
						grDataSilosToGroups.datasilo = strDataSiloSysId;
						grDataSilosToGroups.group = grGroup.sys_id;
						grDataSilosToGroups.type = 'member';
						grDataSilosToGroups.insert();
					}
					else
					{
						//Log('DataSilos: CreateSilo: Member group "'+strGroupName+'" not found!');
					}
				}
			});			
			aFulfillerGroupNames.forEach(function(strGroupName)
			{
				if (strGroupName != '')
				{
					if (grGroup.get('name',strPrefix+strGroupName))
					{
						grDataSilosToGroups.initialize();
						grDataSilosToGroups.datasilo = strDataSiloSysId;
						grDataSilosToGroups.group = grGroup.sys_id;
						grDataSilosToGroups.type = 'fulfiller';
						grDataSilosToGroups.insert();
					}
					else
					{
						//Log('DataSilos: CreateSilo: Fulfiller group "'+strGroupName+'" not found!');
					}
				}

			});
			aSupervisorGroupNames.forEach(function(strGroupName)
			{
				if (strGroupName != '')
				{
					if (grGroup.get('name',strPrefix+strGroupName))
					{
						grDataSilosToGroups.initialize();
						grDataSilosToGroups.datasilo = strDataSiloSysId;
						grDataSilosToGroups.group = grGroup.sys_id;
						grDataSilosToGroups.type = 'supervisor';
						grDataSilosToGroups.insert();
					}
					else
					{
						//Log('DataSilos: CreateSilo: Supervisor group "'+strGroupName+'" not found!');
					}
				}
			});
			//Log('DataSilos: CreateSilo: Silo "'+strName+'" has been created. sys_id='+strDataSiloSysId); 
		}
		return strDataSiloSysId;
	},
	
	
	CreateSuperSiloRelationShip: function(strSuperSiloName,strSubSiloName)
	{
		var GetStringValue = x_snc_devtools.GetStringValue;
		var RenderValue = x_snc_devtools.RenderValue;
		var strPrefix = this.GetPrefix();

		var strSuperSiloName = GetStringValue(strSuperSiloName);
		var strSubSiloName = GetStringValue(strSubSiloName);
		
		var grSuperSilo = new GlideRecord('x_snc_datasilos_datasilos');
		grSuperSilo.addQuery('name','=',strPrefix + strSuperSiloName);
		grSuperSilo.query();
		if (grSuperSilo.next() == false)
		{
			return false;
		}

		var grSubSilo = new GlideRecord('x_snc_datasilos_datasilos');
		grSubSilo.addQuery('name','=',strPrefix + strSubSiloName);
		grSubSilo.query();
		if (grSubSilo.next() == false)
		{
			return false;
		}
		
		var grSiloToSilo = new GlideRecord('x_snc_datasilos_m2m_datasilos_datasilos');
		grSiloToSilo.initialize();
		grSiloToSilo.datasilo_super = grSuperSilo.sys_id;
		grSiloToSilo.datasilo_sub = grSubSilo.sys_id;
		var strSiloToSiloSysId = grSiloToSilo.insert();
		
		return strSiloToSiloSysId;
	},
	
	GetAllDataSilos:function()
	{
		var aResult = [];
		var strPrefix = this.GetPrefix();
		
		function GetSiloGroupsByType(strSiloSysId,strType)
		{
			var aGroupsToSilos = [];
			var grGroupsToSilos = new GlideRecord('x_snc_datasilos_m2m_groups_datasilos');
			grGroupsToSilos.addQuery('datasilo','=',strSiloSysId);
			grGroupsToSilos.addQuery('type','=',strType);
			grGroupsToSilos.query();
			while (grGroupsToSilos.next())
			{
				var grGroup = new GlideRecord('sys_user_group');
				if (grGroup.get(grGroupsToSilos.group))
				{
					aGroupsToSilos.push(grGroup.name);
				}
			}
			aGroupsToSilos = aGroupsToSilos.sort();
			return aGroupsToSilos;
		}
		
		
		var grDataSilos = new GlideRecord('x_snc_datasilos_datasilos');
		grDataSilos.addQuery('name','STARTSWITH',strPrefix);
		grDataSilos.orderBy('name');
		grDataSilos.query();
		while (grDataSilos.next())
		{
			var datasilo = x_snc_devtools.Clone(grDataSilos);
			
			datasilo['_groups_supervisor'] = GetSiloGroupsByType(grDataSilos.sys_id,'supervisor');
			datasilo['_groups_fulfiller'] = GetSiloGroupsByType(grDataSilos.sys_id,'fulfiller');
			datasilo['_groups_member'] = GetSiloGroupsByType(grDataSilos.sys_id,'member');
			
			var aSilosToSilos = [];
			var grSilosToSilos = new GlideRecord('x_snc_datasilos_m2m_datasilos_datasilos');
			grSilosToSilos.addQuery('datasilo_super','=',grDataSilos.sys_id);
			grSilosToSilos.query();
			while (grSilosToSilos.next())
			{
				var grSilo = new GlideRecord('x_snc_datasilos_datasilos');
				if (grSilo.get(grSilosToSilos.datasilo_sub))
				{
					aSilosToSilos.push(grSilo.name);
				}
			}
			aSilosToSilos = aSilosToSilos.sort();
			datasilo['_silos_sub'] = aSilosToSilos;

			var aSilosToSilos = [];
			var grSilosToSilos = new GlideRecord('x_snc_datasilos_m2m_datasilos_datasilos');
			grSilosToSilos.addQuery('datasilo_sub','=',grDataSilos.sys_id);
			grSilosToSilos.query();
			while (grSilosToSilos.next())
			{
				var grSilo = new GlideRecord('x_snc_datasilos_datasilos');
				if (grSilo.get(grSilosToSilos.datasilo_super))
				{
					aSilosToSilos.push(grSilo.name);
				}
			}
			aSilosToSilos = aSilosToSilos.sort();
			datasilo['_silos_super'] = aSilosToSilos;

						
			aResult.push(datasilo);
		}
		return aResult;
	},

    type: 'DataSilosTestDataAPI'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-05-14 11:34:11</sys_created_on>
        <sys_id>5b9580191b781810a89720a8ec4bcbfc</sys_id>
        <sys_mod_count>51</sys_mod_count>
        <sys_name>DataSilosTestDataAPI</sys_name>
        <sys_package display_value="DataSilos" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy/>
        <sys_scope display_value="DataSilos">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_script_include_5b9580191b781810a89720a8ec4bcbfc</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-02 14:17:36</sys_updated_on>
    </sys_script_include>
</record_update>
