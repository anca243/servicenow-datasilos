<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_atf_step">
    <sys_atf_step action="INSERT_OR_UPDATE">
        <active>true</active>
        <copied_from/>
        <description>Run Server Side Validation Script</description>
        <display_name>Run Server Side Script</display_name>
        <inputs/>
        <mugshots_cache_json/>
        <notes/>
        <order>1</order>
        <step_config display_value="Run Server Side Script">41de4a935332120028bc29cac2dc349a</step_config>
        <sys_class_name>sys_atf_step</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-05-07 11:55:14</sys_created_on>
        <sys_id>37a3b3d8db4474d0bc44d844ca961978</sys_id>
        <sys_mod_count>61</sys_mod_count>
        <sys_name>Run Server Side Script</sys_name>
        <sys_package display_value="DataSilos WORK IN PROGRESS" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy/>
        <sys_scope display_value="DataSilos WORK IN PROGRESS">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_atf_step_37a3b3d8db4474d0bc44d844ca961978</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-04-28 14:03:24</sys_updated_on>
        <table/>
        <test display_value="DataSilos - incident - database views">dbf133d4db4474d0bc44d844ca96194b</test>
        <timeout/>
        <warning_message/>
    </sys_atf_step>
    <sys_variable_value action="delete_multiple" query="document_key=37a3b3d8db4474d0bc44d844ca961978"/>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>37a3b3d8db4474d0bc44d844ca961978</document_key>
        <order>100</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-05-07 11:55:14</sys_created_on>
        <sys_id>1ab3fbd4db4474d0bc44d844ca961901</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-05-07 11:55:14</sys_updated_on>
        <value>3.1</value>
        <variable display_value="Jasmine version">42f2564b73031300440211d8faf6a777</variable>
    </sys_variable_value>
    <sys_variable_value action="INSERT_OR_UPDATE">
        <document>sys_atf_step</document>
        <document_key>37a3b3d8db4474d0bc44d844ca961978</document_key>
        <order>200</order>
        <sys_class_name>sys_variable_value</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-05-07 11:55:14</sys_created_on>
        <sys_id>dab3fbd4db4474d0bc44d844ca961901</sys_id>
        <sys_mod_count>61</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-04-28 14:03:24</sys_updated_on>
        <value>(function(outputs, steps, stepResult, assertEqual)&#13;
{&#13;
	var UserImpersonate = x_snc_devtools.UserImpersonate;&#13;
	var RenderValue = x_snc_devtools.RenderValue;&#13;
	var RecordSetValue = x_snc_devtools.RecordSetValue;&#13;
	var GetStringValue = x_snc_devtools.GetStringValue;&#13;
	var SetProperty = x_snc_devtools.SetProperty;&#13;
&#13;
&#13;
	var test = new x_snc_devtools.TestAPI(outputs, steps, stepResult, assertEqual);&#13;
	test.SetResult(true);&#13;
	&#13;
	function TestCase_RecordQuery(&#13;
		vInputUser, vInputTable, vInputPrefix, vInputSysId, vExpected)&#13;
	{&#13;
		&#13;
		return test.TestCase_IsRecordAccessibleByUser(&#13;
			vInputUser, vInputTable, vInputPrefix, vInputSysId, vExpected);&#13;
	}&#13;
	&#13;
	test.Log('1. Prepare configuration');&#13;
	&#13;
	AppSetProperty('active','true');&#13;
	AppSetProperty('tables.incident.active','true');&#13;
	AppSetProperty('database_views.active','true');&#13;
	&#13;
	&#13;
	test.Log('2. Create test data');&#13;
	var testdata = new DataSilosTestDataAPI('_ATF_DATASILOS_');&#13;
&#13;
	var aUserRoles = ['sn_incident_read'];&#13;
	var aSupportRoles = ['itil'];&#13;
	var aSentinelRoles = ['itil','x_snc_datasilos.sentinel'];&#13;
	&#13;
	var strUserSentinel = testdata.CreateUser('SENTINEL',aSentinelRoles);&#13;
	var strUserSpectator = testdata.CreateUser('SPECTATOR',aSupportRoles);&#13;
&#13;
	var strUserCaller = testdata.CreateUser('CALLER',aUserRoles);&#13;
	var strUserOpener = testdata.CreateUser('OPENER',aUserRoles);&#13;
	&#13;
	var strUserAlphaMember = testdata.CreateUser('ALPHA_MEMBER',aSupportRoles);&#13;
	var strUserAlphaFulfiller = testdata.CreateUser('ALPHA_FULFILLER',aSupportRoles);&#13;
	var strUserAlphaSupervisor = testdata.CreateUser('ALPHA_SUPERVISOR',aSupportRoles);&#13;
&#13;
	var strUserBetaMember = testdata.CreateUser('BETA_MEMBER',aSupportRoles);&#13;
	var strUserBetaFulfiller = testdata.CreateUser('BETA_FULFILLER',aSupportRoles);&#13;
	var strUserBetaSupervisor = testdata.CreateUser('BETA_SUPERVISOR',aSupportRoles);&#13;
	&#13;
	var strGroupAlphaMember = testdata.CreateGroup('ALPHA_MEMBER',['ALPHA_MEMBER']);&#13;
	var strGroupAlphaFulfiller = testdata.CreateGroup('ALPHA_FULFILLER',['ALPHA_FULFILLER']);&#13;
	var strGroupAlphaSupervisor = testdata.CreateGroup('ALPHA_SUPERVISOR',['ALPHA_SUPERVISOR']);&#13;
&#13;
	var strGroupBetaMember = testdata.CreateGroup('BETA_MEMBER',['BETA_MEMBER']);&#13;
	var strGroupBetaFulfiller = testdata.CreateGroup('BETA_FULFILLER',['BETA_FULFILLER']);&#13;
	var strGroupBetaSupervisor = testdata.CreateGroup('BETA_SUPERVISOR',['BETA_SUPERVISOR']);&#13;
	&#13;
	var strSiloAlpha = testdata.CreateSilo('ALPHA',['ALPHA_MEMBER'],['ALPHA_FULFILLER'],['ALPHA_SUPERVISOR']);	&#13;
	var strSiloBeta = testdata.CreateSilo('BETA',['BETA_MEMBER'],['BETA_FULFILLER'],['BETA_SUPERVISOR']);&#13;
&#13;
	var strDbViewHandleTest1 = 'TEST1_WITH_A_VERY_LENGTH_DATABASE_VIEW_NAME';&#13;
	var strDbView1 = testdata.CreateDatabaseView(strDbViewHandleTest1,&#13;
		{&#13;
			'tables':&#13;
				[&#13;
					{&#13;
						'table': 'incident',&#13;
						'variable_prefix': 'inc',&#13;
						'order': 100,&#13;
						'where_clause': 'tasksla_task=inc_sys_id',&#13;
						'fields': ['active','sys_id','short_description','sys_class_name','number']&#13;
					},&#13;
					{&#13;
						'table': 'task_sla',&#13;
						'variable_prefix': 'tasksla',&#13;
						'order': 100,&#13;
						'where_clause': '',&#13;
						'fields': ['task']&#13;
					}					&#13;
				]&#13;
		&#13;
		});&#13;
	&#13;
	&#13;
	var strDbViewHandleTest2 = 'TEST2';&#13;
	var strDbView2 = testdata.CreateDatabaseView(strDbViewHandleTest2,&#13;
		{&#13;
			'tables':&#13;
				[&#13;
					{&#13;
						'table': 'incident',&#13;
						'variable_prefix': 'inc',&#13;
						'order': 100,&#13;
						'where_clause': '',&#13;
						'fields': ['active','sys_id','short_description','sys_class_name','number']&#13;
					}			&#13;
				]&#13;
		&#13;
		});	&#13;
	&#13;
	&#13;
	var strDbViewHandleLeftJoin1 = 'LEFTJOIN1';&#13;
	var strDbViewLeftJoin1 = testdata.CreateDatabaseView(strDbViewHandleLeftJoin1,&#13;
		{&#13;
			'tables':&#13;
				[&#13;
					{&#13;
						'table': 'incident',&#13;
						'variable_prefix': 'incident1',&#13;
						'order': 100,&#13;
						'left_join': false,&#13;
						'where_clause': '',&#13;
						'fields': ['active','sys_id','short_description','sys_class_name','number']&#13;
					},			&#13;
					{&#13;
						'table': 'incident',&#13;
						'variable_prefix': 'incident2',&#13;
						'order': 101,&#13;
						'left_join': true,&#13;
						'where_clause': 'incident2_parent_incident=incident1_sys_id',&#13;
						'fields': ['active','sys_id','short_description','sys_class_name','number','parent_incident']&#13;
					}			&#13;
				]&#13;
		&#13;
		});		&#13;
	&#13;
	//Log(RenderValue(testdata.GetAllDatabaseViews()));&#13;
	&#13;
	test.Log('3. Run MaintenanceDatabaseViews()');&#13;
	MaintenanceDatabaseViews();&#13;
	&#13;
	//Log(RenderValue(testdata.GetAllData()));&#13;
&#13;
	function TestScenario(strInfo,strTable,strPrefix)&#13;
	{&#13;
&#13;
		test.Log('\nTest scenario "'+strInfo+'" on table "'+strTable+'"\n');&#13;
		&#13;
		var strIncident = testdata.CreateIncident('TEST_'+strTable,'OPENER','CALLER','ALPHA_MEMBER');&#13;
		test.Log('\nCreateIncident returned: '+RenderValue(strIncident)+'\n');&#13;
		//Log(RenderValue(testdata.GetAllIncidents()));&#13;
		&#13;
		TestCase_RecordQuery(strUserSentinel,strTable,strPrefix,strIncident,true);&#13;
		TestCase_RecordQuery(strUserSpectator,strTable,strPrefix,strIncident,false);&#13;
&#13;
		TestCase_RecordQuery(strUserCaller,strTable,strPrefix,strIncident,true);&#13;
		TestCase_RecordQuery(strUserOpener,strTable,strPrefix,strIncident,true);&#13;
&#13;
		TestCase_RecordQuery(strUserAlphaMember,strTable,strPrefix,strIncident,true);&#13;
		TestCase_RecordQuery(strUserAlphaFulfiller,strTable,strPrefix,strIncident,true);&#13;
		TestCase_RecordQuery(strUserAlphaSupervisor,strTable,strPrefix,strIncident,true);&#13;
&#13;
		TestCase_RecordQuery(strUserBetaMember,strTable,strPrefix,strIncident,false);&#13;
		TestCase_RecordQuery(strUserBetaFulfiller,strTable,strPrefix,strIncident,false);&#13;
		TestCase_RecordQuery(strUserBetaSupervisor,strTable,strPrefix,strIncident,false);&#13;
&#13;
&#13;
		test.Log('\nMove incident to member team in beta silo\n');&#13;
		RecordSetValue('incident',strIncident,'assignment_group',strGroupBetaMember);&#13;
&#13;
		TestCase_RecordQuery(strUserSentinel,strTable,strPrefix,strIncident,true);&#13;
		TestCase_RecordQuery(strUserSpectator,strTable,strPrefix,strIncident,false);&#13;
&#13;
		TestCase_RecordQuery(strUserCaller,strTable,strPrefix,strIncident,true);&#13;
		TestCase_RecordQuery(strUserOpener,strTable,strPrefix,strIncident,true);&#13;
&#13;
		TestCase_RecordQuery(strUserAlphaMember,strTable,strPrefix,strIncident,true);&#13;
		TestCase_RecordQuery(strUserAlphaFulfiller,strTable,strPrefix,strIncident,true);&#13;
		TestCase_RecordQuery(strUserAlphaSupervisor,strTable,strPrefix,strIncident,true);&#13;
&#13;
		TestCase_RecordQuery(strUserBetaMember,strTable,strPrefix,strIncident,true);&#13;
		TestCase_RecordQuery(strUserBetaFulfiller,strTable,strPrefix,strIncident,false);&#13;
		TestCase_RecordQuery(strUserBetaSupervisor,strTable,strPrefix,strIncident,true);&#13;
		&#13;
		test.Log('\n\n');&#13;
&#13;
	}&#13;
&#13;
	test.Log('4. The actual test');&#13;
	&#13;
	TestScenario('Original table','incident','');&#13;
&#13;
	// The following test rely on timely creation of task_sla records:&#13;
	// com.snc.sla.engine.async must be false, otherwise the task_sla record will be created later and some of the test cases would fail.&#13;
	if (gs.getProperty('com.snc.sla.engine.async') == 'false')&#13;
	{&#13;
		TestScenario('OOTB database view without fields','incident_sla','inc_');&#13;
		TestScenario('Custom database view with multiple tables WITH fields',testdata.GetDatabaseViewName(strDbViewHandleTest1),'inc_');&#13;
	}&#13;
	TestScenario('Custom database view with a single table WITH fields',testdata.GetDatabaseViewName(strDbViewHandleTest2),'inc_');&#13;
&#13;
	TestScenario('Custom database view with a left join on the same table',testdata.GetDatabaseViewName(strDbViewHandleLeftJoin1),'incident1_');&#13;
&#13;
	&#13;
	test.Log(RenderValue(testdata.GetAllData(),true));&#13;
		&#13;
	return test.GetResult();&#13;
	&#13;
})(outputs, steps, stepResult, assertEqual);</value>
        <variable display_value="Test script">989d9e235324220002c6435723dc3484</variable>
    </sys_variable_value>
</record_update>
