<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_snc_datasilos.AppBuilderDataSilos</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>The function turns an existing scoped app into a DataSilos plugin app and adds all components required to support a given set of tables.</description>
        <mobile_callable>false</mobile_callable>
        <name>AppBuilderDataSilos</name>
        <sandbox_callable>false</sandbox_callable>
        <script>function AppBuilderDataSilos(vApp,aTables,strAppMenuSeparator,nAppMenuOrderStart)&#13;
{&#13;
/*&#13;
	x_snc_datasilos.AppBuilderDataSilos('x_snc_datasilosci',[&#13;
		'cmdb_ci'],&#13;
		'CMDB',&#13;
		10000);&#13;
*/	&#13;
		&#13;
	&#13;
	var GetAppRecord = x_snc_devtools.GetAppRecord;&#13;
	var GetStringValue = x_snc_devtools.GetStringValue;&#13;
	var GetIntegerValue = x_snc_devtools.GetIntegerValue;&#13;
	var GetArrayValue = x_snc_devtools.GetArrayValue;&#13;
	var RenderValue = x_snc_devtools.RenderValue;&#13;
	var IsValidTable = x_snc_devtools.IsValidTable;&#13;
	var IsValidColumn = x_snc_devtools.IsValidColumn;&#13;
	var GlideRecordInsert = x_snc_devtools.GlideRecordInsert;&#13;
	var GlideRecordUpdate = x_snc_devtools.GlideRecordUpdate;&#13;
	var IsValidSysId = x_snc_devtools.IsValidSysId;&#13;
	var IsValidRecord = x_snc_devtools.IsValidRecord;&#13;
	var RecordGetValue = x_snc_devtools.RecordGetValue;&#13;
	var GetRecord = x_snc_devtools.GetRecord;&#13;
	var GetRoleRecord = x_snc_devtools.GetRoleRecord;&#13;
	var AppSanity = x_snc_devtools.AppSanity;&#13;
	var SetCurrentScope = x_snc_devtools.SetCurrentScope;&#13;
	&#13;
	aTables = GetArrayValue(aTables);&#13;
	strAppMenuSeparator = GetStringValue(strAppMenuSeparator);&#13;
	nAppMenuOrderStart = GetIntegerValue(nAppMenuOrderStart);&#13;
	&#13;
&#13;
	var strTable = '';&#13;
	&#13;
	function Log(strText)&#13;
	{&#13;
		var strTableLog = '';&#13;
		if (strTable != '')&#13;
		{&#13;
			strTableLog = strTable + ': ';&#13;
		}&#13;
		x_snc_datasilos.Log('AppBuilderDataSilos: '+strTableLog+strText);&#13;
	}&#13;
	&#13;
	var strParentAppScope = 'x_snc_datasilos';&#13;
	&#13;
	var grApp = GetAppRecord(vApp);&#13;
	if (grApp == false)&#13;
	{&#13;
		Log('Error: App could not be identified.');&#13;
		return false;&#13;
	}&#13;
	if (grApp.scope == 'x_snc_datasilos')&#13;
	{&#13;
		Log('Error: AppBuilderDataSilos() must not be applied to DataSilos itself.');&#13;
		return false;&#13;
	}&#13;
	&#13;
	if (strAppMenuSeparator == '')&#13;
	{&#13;
		Log('Error: No app menu separator was specified.');&#13;
		return false;&#13;
	}&#13;
	if (nAppMenuOrderStart &lt; 10000)&#13;
	{&#13;
		Log('Error: app menu order start must be 10000 or higher.');&#13;
		return false;&#13;
	}&#13;
&#13;
	SetCurrentScope(grApp.sys_id);&#13;
	&#13;
	var grApp = x_snc_devtools.AppBuilder(&#13;
		grApp,&#13;
		strParentAppScope,&#13;
		strAppMenuSeparator,&#13;
		nAppMenuOrderStart); &#13;
	if (grApp == false)&#13;
	{&#13;
		Log('Error: x_snc_devtools.AppBuilder returned false.');&#13;
		return false;&#13;
	}&#13;
	&#13;
	var strAppSysId = GetStringValue(grApp.sys_id);&#13;
	var strAppScope = GetStringValue(grApp.scope); &#13;
	var strAppVersion = GetStringValue(grApp.version);&#13;
	var strDataSilosVersion = RecordGetValue('sys_app','dafbffebdbb78450ba15a353059619eb','version');&#13;
	&#13;
	var aTables = GetArrayValue(aTables);&#13;
	&#13;
	Log('AppBuilderDataSilos is working on app '+strAppScope+'. The following tables will be supported: '+RenderValue(aTables));&#13;
	&#13;
&#13;
	// We do not implement the extension point implemntation for DataSilos itself!&#13;
	if (strAppScope != 'x_snc_datasilos')&#13;
	{&#13;
		&#13;
&#13;
		// Adding script include "DataSilosGetConfig"&#13;
		var grSSI = new GlideRecord('sys_script_include');&#13;
		grSSI.addQuery('sys_scope','=',strAppSysId);&#13;
		grSSI.addQuery('name','=','DataSilosGetConfig');&#13;
		grSSI.query();&#13;
		if (grSSI.getRowCount() != 0)&#13;
		{&#13;
			Log('Script include "DataSilosGetConfig" already exists...');&#13;
		}&#13;
		else&#13;
		{&#13;
			Log('Adding script include "DataSilosGetConfig"...');&#13;
			var grSSI = new GlideRecord('sys_script_include');&#13;
			grSSI.initialize();&#13;
			grSSI.name = 'DataSilosGetConfig';&#13;
			grSSI.description = "The DataSilosGetConfig is called by the DataSilos extension point instance class and returns the config object with all relevant changes and additions.";&#13;
			grSSI.sys_scope = strAppSysId;&#13;
			grSSI.access = 'public';&#13;
			grSSI.caller_access = '1';&#13;
			grSSI.script =&#13;
				"function DataSilosGetConfig(config)\n"&#13;
				+"{\n"&#13;
				+"\treturn config;\n"&#13;
				+"}";&#13;
			strSSI = GlideRecordInsert(grSSI);&#13;
			Log('Script include "DataSilosGetConfig": '+RenderValue(strSSI));	&#13;
		}&#13;
&#13;
&#13;
		// Adding script include "DataSilosGetRelatedRecords"&#13;
		var grSSI = new GlideRecord('sys_script_include');&#13;
		grSSI.addQuery('sys_scope','=',strAppSysId);&#13;
		grSSI.addQuery('name','=','DataSilosGetRelatedRecords');&#13;
		grSSI.query();&#13;
		if (grSSI.getRowCount() != 0)&#13;
		{&#13;
			Log('Script include "DataSilosGetRelatedRecords" already exists...');&#13;
		}&#13;
		else&#13;
		{&#13;
			Log('Adding script include "DataSilosGetRelatedRecords"...');&#13;
			var grSSI = new GlideRecord('sys_script_include');&#13;
			grSSI.initialize();&#13;
			grSSI.name = 'DataSilosGetRelatedRecords';&#13;
			grSSI.description = "The DataSilosGetRelatedRecords function is called by the DataSilos extension point instance class and returns an array of related records to the given record. If the record does not have any related records the function should return an empty array. If the function returns false, the default DataSilos function or other extensions will provide the related records.";&#13;
			grSSI.sys_scope = strAppSysId;&#13;
			grSSI.access = 'public';&#13;
			grSSI.caller_access = '1';&#13;
			grSSI.script = &#13;
				"function DataSilosGetRelatedRecords(record)\n"&#13;
				+"{\n"&#13;
				+"\tvar IsValidRecord = x_snc_devtools.IsValidRecord;\n"&#13;
				+"\tvar RenderValue = x_snc_devtools.RenderValue;\n"&#13;
				+"\n"&#13;
				+"\tvar aRelatedRecords = [];\n"&#13;
				+"\n"&#13;
				+"\tvar strTable = x_snc_datasilos.GetSupportedTableFromRecord(record);\n"&#13;
				+"\n"&#13;
				+"\treturn false;\n"&#13;
				+"}";&#13;
			strSSI = GlideRecordInsert(grSSI);&#13;
			Log('Script include "DataSilosGetRelatedRecords": '+RenderValue(strSSI));	&#13;
		}	&#13;
&#13;
&#13;
&#13;
		// Adding script include "DataSilosRecordInsert"&#13;
		var grSSI = new GlideRecord('sys_script_include');&#13;
		grSSI.addQuery('sys_scope','=',strAppSysId);&#13;
		grSSI.addQuery('name','=','DataSilosRecordInsert');&#13;
		grSSI.query();&#13;
		if (grSSI.getRowCount() != 0)&#13;
		{&#13;
			Log('Script include "DataSilosRecordInsert" already exists...');&#13;
		}&#13;
		else&#13;
		{&#13;
			Log('Adding script include "DataSilosRecordInsert"...');&#13;
			var grSSI = new GlideRecord('sys_script_include');&#13;
			grSSI.initialize();&#13;
			grSSI.name = 'DataSilosRecordInsert';&#13;
			grSSI.description = "The DataSilosRecordInsert function is called by the DataSilos extension point instance class and processes a record when it is inserted into a table. Return true if the record is handled by the function, false if not.";&#13;
			grSSI.sys_scope = strAppSysId;&#13;
			grSSI.access = 'public';&#13;
			grSSI.caller_access = '1';&#13;
			grSSI.script = &#13;
				"function DataSilosRecordInsert(record)\n"&#13;
				+"{\n"&#13;
				+"\tvar IsValidRecord = x_snc_devtools.IsValidRecord;\n"&#13;
				+"\tvar RenderValue = x_snc_devtools.RenderValue;\n"&#13;
				+"\n"&#13;
				+"\tvar bResult = false;\n"&#13;
				+"\n"&#13;
				+"\tvar strTable = x_snc_datasilos.GetSupportedTableFromRecord(record);\n"&#13;
				+"\n"&#13;
				+"\treturn bResult;\n"&#13;
				+"}";&#13;
			strSSI = GlideRecordInsert(grSSI);&#13;
			Log('Script include "DataSilosRecordInsert": '+RenderValue(strSSI));	&#13;
		}	&#13;
&#13;
&#13;
		// Adding script include "DataSilosRecordUpdate"&#13;
		var grSSI = new GlideRecord('sys_script_include');&#13;
		grSSI.addQuery('sys_scope','=',strAppSysId);&#13;
		grSSI.addQuery('name','=','DataSilosRecordUpdate');&#13;
		grSSI.query();&#13;
		if (grSSI.getRowCount() != 0)&#13;
		{&#13;
			Log('Script include "DataSilosRecordUpdate" already exists...');&#13;
		}&#13;
		else&#13;
		{&#13;
			Log('Adding script include "DataSilosRecordUpdate"...');&#13;
			var grSSI = new GlideRecord('sys_script_include');&#13;
			grSSI.initialize();&#13;
			grSSI.name = 'DataSilosRecordUpdate';&#13;
			grSSI.description = "The DataSilosRecordUpdate function is called by the DataSilos extension point instance class and processes a record when it is updated. Return true if the record is handled by the function, false if not.";&#13;
			grSSI.sys_scope = strAppSysId;&#13;
			grSSI.access = 'public';&#13;
			grSSI.caller_access = '1';&#13;
			grSSI.script =&#13;
				"function DataSilosRecordUpdate(record)\n"&#13;
				+"{\n"&#13;
				+"\tvar IsValidRecord = x_snc_devtools.IsValidRecord;\n"&#13;
				+"\tvar RenderValue = x_snc_devtools.RenderValue;\n"&#13;
				+"\n"&#13;
				+"\tvar bResult = false;\n"&#13;
				+"\n"&#13;
				+"\tvar strTable = x_snc_datasilos.GetSupportedTableFromRecord(record);\n"&#13;
				+"\n"&#13;
				+"\treturn bResult;\n"&#13;
				+"}";&#13;
			strSSI = GlideRecordInsert(grSSI);&#13;
			Log('Script include "DataSilosRecordUpdate": '+RenderValue(strSSI));	&#13;
		}	&#13;
		&#13;
		&#13;
		// Adding script include "DataSilosGetStatus"&#13;
		var grSSI = new GlideRecord('sys_script_include');&#13;
		grSSI.addQuery('sys_scope','=',strAppSysId);&#13;
		grSSI.addQuery('name','=','DataSilosGetStatus');&#13;
		grSSI.query();&#13;
		if (grSSI.getRowCount() != 0)&#13;
		{&#13;
			Log('Script include "DataSilosGetStatus" already exists...');&#13;
		}&#13;
		else&#13;
		{&#13;
			Log('Adding script include "DataSilosGetStatus"...');&#13;
			var grSSI = new GlideRecord('sys_script_include');&#13;
			grSSI.initialize();&#13;
			grSSI.name = 'DataSilosGetStatus';&#13;
			grSSI.description = "The DataSilosGetStatus is called by the DataSilos extension point instance class and returns the plugin_status object with additional status information to be displayed on the Status page.";&#13;
			grSSI.sys_scope = strAppSysId;&#13;
			grSSI.access = 'public';&#13;
			grSSI.caller_access = '1';&#13;
			grSSI.script =&#13;
				"function DataSilosGetStatus(status)\n"&#13;
				+"{\n"&#13;
				+"\tvar SetValue = x_snc_devtools.SetValue;\n"&#13;
				+"\tvar GetAllSupportedTables = x_snc_datasilos.GetAllSupportedTables;\n"&#13;
				+"\t\n"&#13;
				+"\t// Define a new column 'demo'\n"&#13;
				+"\tSetValue('Demo',status,'columns','demo','header');\n"&#13;
				+"\t\n"&#13;
				+"\tvar aTables = GetAllSupportedTables();\n"&#13;
				+"\tfor (var nTable = 0; nTable &lt; aTables.length; nTable++)\n"&#13;
				+"\t{\n"&#13;
				+"\t\tvar strTable = aTables[nTable];\n"&#13;
				+"\t\t// TODO: Add some meaningful status information or useful links for each table:\n"&#13;
				+"\t\tSetValue('TODO: Add some meaningful information about table '+strTable,status,'tables',strTable,'demo');\n"&#13;
				+"\t}\n"&#13;
				+"\t\n"&#13;
				+"\treturn status;\n"&#13;
				+"}";&#13;
			strSSI = GlideRecordInsert(grSSI);&#13;
			Log('Script include "DataSilosGetStatus": '+RenderValue(strSSI));	&#13;
		}&#13;
		&#13;
	}&#13;
	&#13;
	&#13;
	&#13;
	&#13;
	for (var nTable = 0; nTable &lt; aTables.length; nTable++)&#13;
	{&#13;
		strTable = aTables[nTable];&#13;
		if (IsValidTable(strTable) == false)&#13;
		{&#13;
			Log('IsValidTable("'+strTable+'") returned false. Ignoring table.');&#13;
		}&#13;
		else&#13;
		{&#13;
			Log('Working on table "'+strTable+'"...');&#13;
&#13;
			var strTableScope = '';&#13;
			var grSDO = new GlideRecord('sys_db_object');&#13;
			grSDO.addQuery('name','=',strTable);&#13;
			grSDO.query();&#13;
			if (grSDO.next())&#13;
			{&#13;
				var grScope = GetRecord('sys_scope',grSDO.sys_scope);&#13;
				if (grScope != null)&#13;
				{&#13;
					strTableScope = GetStringValue(grScope.scope);&#13;
				}&#13;
			}&#13;
			&#13;
			function MakeColumnName(strColumn)&#13;
			{&#13;
				&#13;
				if (strAppScope == strTableScope)&#13;
				{&#13;
					return strColumn;&#13;
				}&#13;
				return strAppScope + '_' + strColumn;&#13;
			}&#13;
			&#13;
			var strColumn = MakeColumnName('global');&#13;
			&#13;
			var strFieldSysId = '';&#13;
			var grSD = new GlideRecord('sys_dictionary');&#13;
			grSD.addQuery('name','=',strTable);&#13;
			grSD.addQuery('element','=',strColumn);&#13;
			grSD.query();&#13;
			if (grSD.getRowCount() != 0)&#13;
			{&#13;
				grSD.next();&#13;
				strFieldSysId = GetStringValue(grSD.sys_id);&#13;
				Log('Field "Global" already exists in table "'+strTable+'".');&#13;
			}&#13;
			else&#13;
			{&#13;
				var grSD = new GlideRecord('sys_dictionary');&#13;
				grSD.initialize();&#13;
				grSD.active = true;&#13;
				grSD.calculation = "&lt;![CDATA[ (function calculatedFieldValue(current) { // Add your code here return ''; // return the calculated value })(current); ]]&gt;";&#13;
				grSD.column_label = 'DataSilos Global Visibility';&#13;
				grSD.default_value = 'false';&#13;
				grSD.element = strColumn;&#13;
				grSD.internal_type = 'boolean';&#13;
				grSD.name = strTable;&#13;
				grSD.reference = null;&#13;
				grSD.sys_scope = strAppSysId;&#13;
				strFieldSysId = GlideRecordInsert(grSD);&#13;
				Log('Adding the "Global Visibility" field: '+RenderValue(strFieldSysId));&#13;
				AppBuilderDataSilosFieldLabelsSetScope(strAppScope,strTable,'global',strAppScope);&#13;
			}&#13;
			&#13;
			if (IsValidSysId(strFieldSysId) == true)&#13;
			{&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'global', strFieldSysId, 'read');&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'global', strFieldSysId, 'write');&#13;
			}&#13;
			&#13;
			&#13;
			&#13;
			strColumn = MakeColumnName('supervisor_whitelist');&#13;
			&#13;
			var strFieldSysId = '';&#13;
			var grSD = new GlideRecord('sys_dictionary');&#13;
			grSD.addQuery('name','=',strTable);&#13;
			grSD.addQuery('element','=',strColumn);&#13;
			grSD.query();&#13;
			if (grSD.getRowCount() != 0)&#13;
			{&#13;
				grSD.next();&#13;
				strFieldSysId = GetStringValue(grSD.sys_id);&#13;
				Log('Field "Supervisor Whitelist" already exists in table "'+strTable+'".');&#13;
			}&#13;
			else&#13;
			{&#13;
				var grSD = new GlideRecord('sys_dictionary');&#13;
				grSD.initialize();&#13;
				grSD.active = true;&#13;
				grSD.attributes = 'edge_encryption_enabled=true,no_sort=true,slushbucket_ref_no_expand=true';&#13;
				grSD.audit = false;&#13;
				grSD.calculation = "&lt;![CDATA[ (function calculatedFieldValue(current) { // Add your code here return ''; // return the calculated value })(current); ]]&gt;";&#13;
				grSD.column_label = 'DataSilos Supervisor Whitelist';&#13;
				grSD.element = strColumn;&#13;
				grSD.internal_type = 'glide_list';&#13;
				grSD.max_length = 4000;&#13;
				grSD.name = strTable;&#13;
				grSD.reference = 'x_snc_datasilos_datasilos';&#13;
				grSD.reference_cascade_rule = 'none';&#13;
				grSD.sys_scope = strAppSysId;&#13;
				grSD.use_reference_qualifier = 'simple';&#13;
				strFieldSysId = GlideRecordInsert(grSD);&#13;
				Log('Adding the "Supervisor Whitelist" field: '+RenderValue(strFieldSysId));&#13;
				AppBuilderDataSilosFieldLabelsSetScope(strAppScope,strTable,'supervisor_whitelist',strAppScope);&#13;
			}&#13;
			&#13;
			if (IsValidSysId(strFieldSysId) == true)&#13;
			{&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'supervisor_whitelist', strFieldSysId, 'read');&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'supervisor_whitelist', strFieldSysId, 'write');&#13;
			}&#13;
			&#13;
			&#13;
			strColumn = MakeColumnName('fulfiller_whitelist');&#13;
			&#13;
			var strFieldSysId = '';&#13;
			var grSD = new GlideRecord('sys_dictionary');&#13;
			grSD.addQuery('name','=',strTable);&#13;
			grSD.addQuery('element','=',strColumn);&#13;
			grSD.query();&#13;
			if (grSD.getRowCount() != 0)&#13;
			{&#13;
				grSD.next();&#13;
				strFieldSysId = GetStringValue(grSD.sys_id);&#13;
				Log('Field "Fulfiller Whitelist" already exists in table "'+strTable+'".');&#13;
			}&#13;
			else&#13;
			{&#13;
				var grSD = new GlideRecord('sys_dictionary');&#13;
				grSD.initialize();&#13;
				grSD.active = true;&#13;
				grSD.attributes = 'edge_encryption_enabled=true,no_sort=true,slushbucket_ref_no_expand=true';&#13;
				grSD.calculation = "&lt;![CDATA[ (function calculatedFieldValue(current) { // Add your code here return ''; // return the calculated value })(current); ]]&gt;";&#13;
				grSD.column_label = 'DataSilos Fulfiller Whitelist';&#13;
				grSD.element = strColumn;&#13;
				grSD.internal_type = 'glide_list';&#13;
				grSD.max_length = 4000;&#13;
				grSD.name = strTable;&#13;
				grSD.reference = 'x_snc_datasilos_datasilos';&#13;
				grSD.reference_cascade_rule = 'none';&#13;
				grSD.sys_scope = strAppSysId;&#13;
				grSD.use_reference_qualifier = 'simple';&#13;
				strFieldSysId = GlideRecordInsert(grSD);&#13;
				Log('Adding the "Fulfiller Whitelist" field: '+RenderValue(strFieldSysId));&#13;
				AppBuilderDataSilosFieldLabelsSetScope(strAppScope,strTable,'fulfiller_whitelist',strAppScope);&#13;
			}&#13;
			&#13;
			if (IsValidSysId(strFieldSysId) == true)&#13;
			{&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'fulfiller_whitelist', strFieldSysId, 'read');&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'fulfiller_whitelist', strFieldSysId, 'write');&#13;
			}&#13;
&#13;
&#13;
			strColumn = MakeColumnName('group_whitelist');&#13;
			&#13;
			var strFieldSysId = '';&#13;
			var grSD = new GlideRecord('sys_dictionary');&#13;
			grSD.addQuery('name','=',strTable);&#13;
			grSD.addQuery('element','=',strColumn);&#13;
			grSD.query();&#13;
			if (grSD.getRowCount() != 0)&#13;
			{&#13;
				grSD.next();&#13;
				strFieldSysId = GetStringValue(grSD.sys_id);&#13;
				Log('Field "Group Whitelist" already exists in table "'+strTable+'".');&#13;
			}&#13;
			else&#13;
			{&#13;
				var grSD = new GlideRecord('sys_dictionary');&#13;
				grSD.initialize();&#13;
				grSD.active = true;&#13;
				grSD.attributes = 'edge_encryption_enabled=true,no_sort=true,slushbucket_ref_no_expand=true';&#13;
				grSD.calculation = "&lt;![CDATA[ (function calculatedFieldValue(current) { // Add your code here return ''; // return the calculated value })(current); ]]&gt;";&#13;
				grSD.column_label = 'DataSilos Group Whitelist';&#13;
				grSD.element = strColumn;&#13;
				grSD.internal_type = 'glide_list';&#13;
				grSD.max_length = 4000;&#13;
				grSD.name = strTable;&#13;
				grSD.reference = 'sys_user_group';&#13;
				grSD.reference_cascade_rule = 'none';&#13;
				grSD.sys_scope = strAppSysId;&#13;
				grSD.use_reference_qualifier = 'simple';&#13;
				strFieldSysId = GlideRecordInsert(grSD);&#13;
				Log('Adding the "Group Whitelist" field: '+RenderValue(strFieldSysId));&#13;
				AppBuilderDataSilosFieldLabelsSetScope(strAppScope,strTable,'group_whitelist',strAppScope);&#13;
			}&#13;
			if (IsValidSysId(strFieldSysId) == true)&#13;
			{&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'group_whitelist', strFieldSysId, 'read');&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'group_whitelist', strFieldSysId, 'write');&#13;
			}&#13;
			&#13;
			&#13;
			strColumn = MakeColumnName('security_clearance');&#13;
			&#13;
			var strFieldSysId = '';&#13;
			var grSD = new GlideRecord('sys_dictionary');&#13;
			grSD.addQuery('name','=',strTable);&#13;
			grSD.addQuery('element','=',strColumn);&#13;
			grSD.query();&#13;
			if (grSD.getRowCount() != 0)&#13;
			{&#13;
				grSD.next();&#13;
				strFieldSysId = GetStringValue(grSD.sys_id);&#13;
				Log('Field "Security Clearance" already exists in table "'+strTable+'".');&#13;
			}&#13;
			else&#13;
			{&#13;
				var grSD = new GlideRecord('sys_dictionary');&#13;
				grSD.initialize();&#13;
				grSD.active = true;&#13;
				grSD.calculation = "&lt;![CDATA[ (function calculatedFieldValue(current) { // Add your code here return ''; // return the calculated value })(current); ]]&gt;";&#13;
				grSD.column_label = 'DataSilos Security Clearance';&#13;
				grSD.default_value = '0';&#13;
				grSD.element = strColumn;&#13;
				grSD.internal_type = 'integer';&#13;
				grSD.name = strTable;&#13;
				grSD.sys_scope = strAppSysId;&#13;
				strFieldSysId = GlideRecordInsert(grSD);&#13;
				Log('Adding the "Security Clearance" field: '+RenderValue(strFieldSysId));&#13;
				AppBuilderDataSilosFieldLabelsSetScope(strAppScope,strTable,'security_clearance',strAppScope);&#13;
			}&#13;
			if (IsValidSysId(strFieldSysId) == true)&#13;
			{&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'security_clearance', strFieldSysId, 'read');&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'security_clearance', strFieldSysId, 'write');&#13;
			}	&#13;
			&#13;
			strColumn = MakeColumnName('ghost');&#13;
			&#13;
			var strFieldSysId = '';&#13;
			var grSD = new GlideRecord('sys_dictionary');&#13;
			grSD.addQuery('name','=',strTable);&#13;
			grSD.addQuery('element','=',strColumn);&#13;
			grSD.query();&#13;
			if (grSD.getRowCount() != 0)&#13;
			{&#13;
				grSD.next();&#13;
				strFieldSysId = GetStringValue(grSD.sys_id);&#13;
				Log('Field "Ghost" already exists in table "'+strTable+'".');&#13;
			}&#13;
			else&#13;
			{&#13;
				var grSD = new GlideRecord('sys_dictionary');&#13;
				grSD.initialize();&#13;
				grSD.active = true;&#13;
				grSD.calculation = "&lt;![CDATA[ (function calculatedFieldValue(current) { // Add your code here return ''; // return the calculated value })(current); ]]&gt;";&#13;
				grSD.column_label = 'DataSilos Ghost';&#13;
				grSD.default_value = 'false';&#13;
				grSD.element = strColumn;&#13;
				grSD.internal_type = 'boolean';&#13;
				grSD.name = strTable;&#13;
				grSD.sys_scope = strAppSysId;&#13;
				strFieldSysId = GlideRecordInsert(grSD);&#13;
				Log('Adding the "Ghost" field: '+RenderValue(strFieldSysId));&#13;
				AppBuilderDataSilosFieldLabelsSetScope(strAppScope,strTable,'ghost',strAppScope);&#13;
			}&#13;
			if (IsValidSysId(strFieldSysId) == true)&#13;
			{&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'ghost', strFieldSysId, 'read');&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'ghost', strFieldSysId, 'write');&#13;
			}&#13;
			&#13;
			strColumn = MakeColumnName('last_maintenance');&#13;
&#13;
			var strFieldSysId = '';&#13;
			var grSD = new GlideRecord('sys_dictionary');&#13;
			grSD.addQuery('name','=',strTable);&#13;
			grSD.addQuery('element','=',strColumn);&#13;
			grSD.query();&#13;
			if (grSD.getRowCount() != 0)&#13;
			{&#13;
				grSD.next();&#13;
				strFieldSysId = GetStringValue(grSD.sys_id);&#13;
				Log('Field "Last Maintenance" already exists in table "'+strTable+'".');&#13;
			}&#13;
			else&#13;
			{&#13;
				var grSD = new GlideRecord('sys_dictionary');&#13;
				grSD.initialize();&#13;
				grSD.active = true;&#13;
				grSD.calculation = "&lt;![CDATA[ (function calculatedFieldValue(current) { // Add your code here return ''; // return the calculated value })(current); ]]&gt;";&#13;
				grSD.column_label = 'DataSilos Last Maintenance';&#13;
				grSD.default_value = '';&#13;
				grSD.element = strColumn;&#13;
				grSD.internal_type = 'glide_date_time';&#13;
				grSD.name = strTable;&#13;
				grSD.sys_scope = strAppSysId;&#13;
				strFieldSysId = GlideRecordInsert(grSD);&#13;
				Log('Adding the "Last Maintenance" field: '+RenderValue(strFieldSysId));&#13;
				AppBuilderDataSilosFieldLabelsSetScope(strAppScope,strTable,'last_maintenance',strAppScope);&#13;
&#13;
			}&#13;
			if (IsValidSysId(strFieldSysId) == true)&#13;
			{&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'last_maintenance', strFieldSysId, 'read');&#13;
				AppBuilderDataSilosAddFieldACL(strAppScope, strTable, 'last_maintenance', strFieldSysId, 'write');&#13;
			}&#13;
			&#13;
			&#13;
			&#13;
			&#13;
			Log('Working on table maintenance scheduled job...');&#13;
			var strJobName = 'DataSilos - Maintenance - '+strTable;&#13;
			var grSA = new GlideRecord('sysauto_script');&#13;
			grSA.addQuery('name','=',strJobName);&#13;
			grSA.addQuery('sys_scope','=',strAppSysId);&#13;
			grSA.query();&#13;
			if (grSA.getRowCount() != 0)&#13;
			{&#13;
				grSA.next();&#13;
				Log('Maintenance scheduled job already exists for table "'+strTable+'".');&#13;
			}&#13;
			else&#13;
			{&#13;
				var grSA = new GlideRecord('sysauto_script');&#13;
				grSA.initialize();&#13;
				grSA.name = strJobName;&#13;
				grSA.sys_scope = strAppSysId;&#13;
				grSA.active = true;&#13;
				grSA.conditional = false;&#13;
				grSA.run_as = '6816f79cc0a8016401c5a33be04be441'; // system admin&#13;
				grSA.run_dayofmonth = '1';&#13;
				grSA.run_dayofweek = '1';&#13;
				grSA.run_time = '1969-12-31 23:00:00';&#13;
				grSA.run_period.setDateNumericValue(600000); // 10 minutes&#13;
				grSA.run_type = 'periodically';&#13;
				var strScript = &#13;
					"x_snc_datasilos.Maintenance('"+strTable+"');";&#13;
				grSA.script = strScript;				&#13;
				var strJobSysId = GlideRecordInsert(grSA);&#13;
				Log('Scheduled job: '+RenderValue(strJobSysId));&#13;
			}&#13;
					&#13;
			&#13;
			Log('Working on business rule...');&#13;
			var strBusinessRuleName = GetBusinessRuleName(strTable);&#13;
			var grBR = new GlideRecord('sys_script');&#13;
			grBR.addQuery('name','=',strBusinessRuleName);&#13;
			grBR.addQuery('sys_scope','=',strAppSysId);&#13;
			grBR.query();&#13;
			if (grBR.getRowCount() != 0)&#13;
			{&#13;
				grBR.next();&#13;
				Log('Business rule already exists for table "'+strTable+'".');&#13;
			}&#13;
			else&#13;
			{&#13;
				var grBR = new GlideRecord('sys_script');&#13;
				grBR.initialize();&#13;
				grBR.active = true;&#13;
				grBR.name = strBusinessRuleName;&#13;
				grBR.sys_scope = strAppSysId;&#13;
				grBR.action_insert = true;&#13;
				grBR.action_update = true;&#13;
				grBR.action_query = true;&#13;
				grBR.advanced = true;&#13;
				grBR.when = 'before';&#13;
				grBR.order = 42600;&#13;
				grBR.collection = strTable;&#13;
				var strScript = &#13;
					"(function executeRule(current, previous /*null when async*/) {\n"&#13;
					+"\tx_snc_datasilos.ExecuteBusinessRule(current, previous);\n"&#13;
					+"})(current, previous);";&#13;
				grBR.script = strScript;				&#13;
				var strBusinessRuleSysId = GlideRecordInsert(grBR);&#13;
				Log('Business rule: '+RenderValue(strBusinessRuleSysId));&#13;
			}&#13;
			&#13;
			if (strAppScope != 'x_snc_datasilos')&#13;
			{&#13;
			&#13;
				var grSSI = new GlideRecord('sys_script_include');&#13;
				grSSI.addQuery('sys_scope','=',strAppSysId);&#13;
				grSSI.addQuery('name','=','DataSilosGetConfig');&#13;
				grSSI.query();&#13;
				if (grSSI.next() == false)&#13;
				{&#13;
					Log('ERROR: Script include "DataSilosGetConfig" DOES NOT EXIST...');&#13;
				}&#13;
				else&#13;
				{&#13;
					Log('Modifying script include "DataSilosGetConfig"...');&#13;
					var strScript = GetStringValue(grSSI.script);&#13;
					if (strScript.indexOf('return config;') == -1)&#13;
					{&#13;
						Log('ERROR: Script include "DataSilosGetConfig" DOES NOT SEEM TO BE IMPLEMENTED CORRECTLY...');&#13;
					}&#13;
					if (strScript.indexOf("config['tables']['"+strTable+"'] =") == -1)&#13;
					{&#13;
						strScriptTableConfig = &#13;
							"config['tables']['"+strTable+"'] =\n"&#13;
							+"\t{\n"&#13;
							+"\t\t'scope': '"+strAppScope+"',\n"&#13;
							+"\t\t'active': true,\n"&#13;
							+"\t\t'avoid_expensive_queries': false,\n"&#13;
							+"\t\t'columns':\n"&#13;
							+"\t\t{\n"&#13;
							+"\t\t\t'instant_access':\n"&#13;
							+"\t\t\t{\n"&#13;
							+"\t\t\t\t'sys_user': ''\n"&#13;
							+"\t\t\t},\n"&#13;
							+"\t\t\t'whitelist_trigger':\n"&#13;
							+"\t\t\t{\n"&#13;
							+"\t\t\t\t'sys_user_group': ''\n"&#13;
							+"\t\t\t},\n"&#13;
							+"\t\t}\n"&#13;
							+"\t};\n"&#13;
							+"\t\n"&#13;
							+"\treturn config;";&#13;
						strScript = strScript.replace('return config;',strScriptTableConfig);&#13;
						grSSI.script = strScript;&#13;
						strSSI = GlideRecordUpdate(grSSI);&#13;
						Log('Updating script include "DataSilosGetConfig": '+RenderValue(strSSI));	&#13;
					}&#13;
&#13;
				}&#13;
&#13;
&#13;
				var grSSI = new GlideRecord('sys_script_include');&#13;
				grSSI.addQuery('sys_scope','=',strAppSysId);&#13;
				grSSI.addQuery('name','=','DataSilosGetRelatedRecords');&#13;
				grSSI.query();&#13;
				if (grSSI.next() == false)&#13;
				{&#13;
					Log('ERROR: Script include "DataSilosGetRelatedRecords" DOES NOT EXIST...');&#13;
				}&#13;
				else&#13;
				{&#13;
					Log('Modifying script include "DataSilosGetRelatedRecords"...');&#13;
					var strScript = GetStringValue(grSSI.script);&#13;
					if (strScript.indexOf('return false;') == -1)&#13;
					{&#13;
						Log('ERROR: Script include "DataSilosGetRelatedRecords" DOES NOT SEEM TO BE IMPLEMENTED CORRECTLY...');&#13;
					}&#13;
					if (strScript.indexOf("if (strTable == '"+strTable+"')") == -1)&#13;
					{&#13;
						strScriptTableConfig =&#13;
							"if (strTable == '"+strTable+"')\n"&#13;
							+"\t{\n"&#13;
							+"\t\t// Add your code here...\n"&#13;
							+"\t\treturn aRelatedRecords;\n"&#13;
							+"\t}\n"&#13;
							+"\t\n"&#13;
							+"\treturn false;";&#13;
						strScript = strScript.replace('return false;',strScriptTableConfig);&#13;
						grSSI.script = strScript;&#13;
						strSSI = GlideRecordUpdate(grSSI);&#13;
						Log('Updating script include "DataSilosGetRelatedRecords": '+RenderValue(strSSI));	&#13;
					}&#13;
&#13;
				}&#13;
&#13;
&#13;
&#13;
				var grSSI = new GlideRecord('sys_script_include');&#13;
				grSSI.addQuery('sys_scope','=',strAppSysId);&#13;
				grSSI.addQuery('name','=','DataSilosRecordInsert');&#13;
				grSSI.query();&#13;
				if (grSSI.next() == false)&#13;
				{&#13;
					Log('ERROR: Script include "DataSilosRecordInsert" DOES NOT EXIST...');&#13;
				}&#13;
				else&#13;
				{&#13;
					Log('Modifying script include "DataSilosRecordInsert"...');&#13;
					var strScript = GetStringValue(grSSI.script);&#13;
					if (strScript.indexOf('var strTable = x_snc_datasilos.GetSupportedTableFromRecord(record);') == -1)&#13;
					{&#13;
						Log('ERROR: Script include "DataSilosRecordInsert" DOES NOT SEEM TO BE IMPLEMENTED CORRECTLY...');&#13;
					}&#13;
					if (strScript.indexOf('return bResult;') == -1)&#13;
					{&#13;
						Log('ERROR: Script include "DataSilosRecordInsert" DOES NOT SEEM TO BE IMPLEMENTED CORRECTLY...');&#13;
					}						&#13;
					if (strScript.indexOf("strTable == '"+strTable+"'") == -1)&#13;
					{&#13;
						strScriptTableConfig = &#13;
							"if (strTable == '"+strTable+"')\n"&#13;
							+"\t{\n"&#13;
							+"\t\t//Add your code here...\n"&#13;
							+"\t\tbResult = true;\n"&#13;
							+"\t}\n"&#13;
							+"\t\n"&#13;
							+"\treturn bResult;";&#13;
						strScript = strScript.replace('return bResult;',strScriptTableConfig);&#13;
						grSSI.script = strScript;&#13;
						strSSI = GlideRecordUpdate(grSSI);&#13;
						Log('Updating script include "DataSilosRecordInsert": '+RenderValue(strSSI));	&#13;
					}&#13;
				}&#13;
&#13;
&#13;
&#13;
				var grSSI = new GlideRecord('sys_script_include');&#13;
				grSSI.addQuery('sys_scope','=',strAppSysId);&#13;
				grSSI.addQuery('name','=','DataSilosRecordUpdate');&#13;
				grSSI.query();&#13;
				if (grSSI.next() == false)&#13;
				{&#13;
					Log('ERROR: Script include "DataSilosRecordUpdate" DOES NOT EXIST...');&#13;
				}&#13;
				else&#13;
				{&#13;
					Log('Modifying script include "DataSilosRecordUpdate"...');&#13;
					var strScript = GetStringValue(grSSI.script);&#13;
					if (strScript.indexOf('var strTable = x_snc_datasilos.GetSupportedTableFromRecord(record);') == -1)&#13;
					{&#13;
						Log('ERROR: Script include "DataSilosRecordUpdate" DOES NOT SEEM TO BE IMPLEMENTED CORRECTLY...');&#13;
					}&#13;
					if (strScript.indexOf('return bResult;') == -1)&#13;
					{&#13;
						Log('ERROR: Script include "DataSilosRecordUpdate" DOES NOT SEEM TO BE IMPLEMENTED CORRECTLY...');&#13;
					}					&#13;
					if (strScript.indexOf("strTable == '"+strTable+"'") == -1)&#13;
					{&#13;
						strScriptTableConfig = &#13;
							"if (strTable == '"+strTable+"')\n"&#13;
							+"\t{\n"&#13;
							+"\t\t//Add your code here...\n"&#13;
							+"\t\tbResult = true;\n"&#13;
							+"\t}\n"&#13;
							+"\t\n"&#13;
							+"\treturn bResult;";&#13;
						strScript = strScript.replace('return bResult;',strScriptTableConfig);&#13;
						grSSI.script = strScript;&#13;
						strSSI = GlideRecordUpdate(grSSI);&#13;
						Log('Updating script include "DataSilosRecordUpdate": '+RenderValue(strSSI));	&#13;
					}&#13;
				}&#13;
			}&#13;
			&#13;
			&#13;
			var grView = new GlideRecord('sys_ui_view');&#13;
			grView.addQuery('name','=','data'+'silos');&#13;
			grView.query();&#13;
			if (grView.next() == true)&#13;
			{&#13;
				Log('Working on UI list...');&#13;
				var grUL = new GlideRecord('sys_ui_list');&#13;
				grUL.addQuery('name','=',strTable);&#13;
				grUL.addQuery('sys_scope','=',strAppSysId);&#13;
				grUL.query();&#13;
				if (grUL.getRowCount() != 0)&#13;
				{&#13;
					grUL.next();&#13;
					Log('UI list (layout) already exists for table "'+strTable+'".');&#13;
				}&#13;
				else&#13;
				{&#13;
					var grUL = new GlideRecord('sys_ui_list');&#13;
					grUL.initialize();&#13;
					//grUL.active = true;&#13;
					grUL.name = strTable;&#13;
					grUL.sys_scope = strAppSysId;&#13;
					grUL.view = grView.sys_id; // the DataSilos view&#13;
					var strUiListSysId = GlideRecordInsert(grUL);&#13;
					Log('UI list (layout) : '+RenderValue(strUiListSysId));&#13;
					if (IsValidSysId(strUiListSysId) == true)&#13;
					{&#13;
						&#13;
						var nPosition = 0;&#13;
						function AddUiListElement(strColumn)&#13;
						{&#13;
							var strElement = strColumn;&#13;
							if (IsValidColumn(strTable,strElement) == false)&#13;
							{&#13;
								strElement = strAppScope+'_' + strColumn;&#13;
								if (IsValidColumn(strTable,strElement) == false)&#13;
								{&#13;
									return false;&#13;
								}&#13;
							}&#13;
							&#13;
							var grULE = new GlideRecord('sys_ui_list_element');&#13;
							grULE.initialize();&#13;
							grULE.element = strElement;&#13;
							grULE.list_id = strUiListSysId;&#13;
							grULE.position = nPosition++;&#13;
							grULE.sys_scope = strAppSysId;&#13;
							var strUiListElementSysId = GlideRecordInsert(grULE);&#13;
							Log('Added UI list element "'+strColumn+'": '+RenderValue(strUiListElementSysId));&#13;
							&#13;
							&#13;
						}&#13;
						&#13;
						AddUiListElement('number');&#13;
						AddUiListElement('name');&#13;
						AddUiListElement('short_description');&#13;
						AddUiListElement('sys_class_name');&#13;
						AddUiListElement('sys_created_on');&#13;
						AddUiListElement('global');&#13;
						AddUiListElement('supervisor_whitelist');&#13;
						AddUiListElement('fulfiller_whitelist');&#13;
						AddUiListElement('group_whitelist');&#13;
						AddUiListElement('security_clearance');&#13;
						AddUiListElement('ghost');&#13;
						AddUiListElement('last_maintenance');&#13;
						AddUiListElement('opened_by');&#13;
						AddUiListElement('caller_id');&#13;
						AddUiListElement('requested_for');&#13;
						AddUiListElement('requested_by');&#13;
						AddUiListElement('assignment_group');&#13;
					}&#13;
				}&#13;
&#13;
			}&#13;
&#13;
			&#13;
		}&#13;
	}&#13;
	&#13;
	strTable = '';&#13;
	&#13;
	&#13;
	// Modify AppGetDependencies script include&#13;
	var grSI = new GlideRecord('sys_script_include');&#13;
	grSI.addQuery('sys_scope','=',strAppSysId);&#13;
	grSI.addQuery('name','=','AppGetDependencies');&#13;
	grSI.query();&#13;
	while (grSI.next())&#13;
	{&#13;
		var strScript = GetStringValue(grSI.script);&#13;
		if (strScript.indexOf("name: 'DataSilos'") == -1)&#13;
		{&#13;
			Log('Modifying script include AppGetDependencies to add dependency to DataSilos...');&#13;
&#13;
			strScriptDataSilosDependency =&#13;
				"\t,\n"&#13;
				+"\t\t{\n"&#13;
				+"\t\t\tname: 'DataSilos',\n"&#13;
				+"\t\t\tversion: '"+strDataSilosVersion+"',\n"&#13;
				+"\t\t\turl: 'https://github.com/saschawildgrube/servicenow-datasilos/',\n"&#13;
				+"\t\t\twebsite_url: 'https://www.wildgrube.com/servicenow-datasilos'\n"&#13;
				+"\t\t}\n"&#13;
				+"\t];";&#13;
&#13;
			strScript = strScript.replace('];',strScriptDataSilosDependency);&#13;
			grSI.script = strScript;&#13;
			GlideRecordUpdate(grSI);&#13;
		}&#13;
&#13;
&#13;
		// Get the extension point &#13;
		var grEP = new GlideRecord('sys_extension_point');&#13;
		grEP.addQuery('api_name','=','x_snc_datasilos.DataSilos');&#13;
		grEP.query();&#13;
		if (grEP.next() == true)&#13;
		{&#13;
&#13;
			// Adding script include "DataSilos" which implements the extension point&#13;
			var strDataSilosScriptInclude = false;&#13;
			var strScript = GetStringValue(grEP.example);&#13;
			strScript = strScript.replaceAll('x_this_app_scope',strAppScope);&#13;
			var grSSI = new GlideRecord('sys_script_include');&#13;
			grSSI.addQuery('sys_scope','=',strAppSysId);&#13;
			grSSI.addQuery('name','=','Data'+'Silos');&#13;
			grSSI.query();&#13;
			if (grSSI.getRowCount() != 0)&#13;
			{&#13;
				Log('Script include "DataSilos" already exists. Updating it...');&#13;
				grSSI.next();&#13;
				grSSI.script = strScript;&#13;
				GlideRecordUpdate(grSSI);&#13;
				strDataSilosScriptInclude = grSSI.sys_id;&#13;
			}&#13;
			else&#13;
			{&#13;
				Log('Adding script include "DataSilos"...');&#13;
				var grSSI = new GlideRecord('sys_script_include');&#13;
				grSSI.initialize();&#13;
				grSSI.name = 'Data'+'Silos';&#13;
				grSSI.description = "Implements the extension point for DataSilos.";&#13;
				grSSI.sys_scope = strAppSysId;&#13;
				grSSI.access = 'public';&#13;
				grSSI.caller_access = '1';&#13;
				grSSI.script = strScript;&#13;
				strDataSilosScriptInclude = GlideRecordInsert(grSSI);&#13;
			}&#13;
			Log('Script include "DataSilos": '+RenderValue(strDataSilosScriptInclude));&#13;
&#13;
			// Adding extension point instance&#13;
			var strEPI = false;&#13;
			var grEPI = new GlideRecord('sys_extension_instance');&#13;
			grEPI.addQuery('sys_scope','=',strAppSysId);&#13;
			grEPI.addQuery('point','=','x_snc_datasilos.DataSilos');&#13;
			grEPI.query();&#13;
			if (grEPI.getRowCount() != 0)&#13;
			{&#13;
				grEPI.next();&#13;
				Log('Extension point instance for "DataSilos" already exists: '+grEPI.sys_id);&#13;
			}&#13;
			else&#13;
			{&#13;
				Log('Adding extension point instance for "DataSilos"...');&#13;
				var grEPI = new GlideRecord('sys_extension_instance');&#13;
				grEPI.initialize();&#13;
				grEPI.active = true;&#13;
				grEPI.point = 'x_snc_datasilos.DataSilos';&#13;
				grEPI.sys_scope = strAppSysId;&#13;
				grEPI.script_include = strDataSilosScriptInclude;&#13;
				grEPI.order = 100;&#13;
				strEPI = GlideRecordInsert(grEPI);&#13;
				Log('Adding extension point instance for "DataSilos": '+RenderValue(strEPI));&#13;
			}&#13;
		}&#13;
&#13;
&#13;
	}&#13;
&#13;
	function AppBuilderDataSilosFieldLabelsSetScope(strAppScope,strTable,strColumn,strScope)&#13;
	{&#13;
		var grSD = new GlideRecord('sys_documentation');&#13;
		grSD.addQuery('name','=',strTable);&#13;
		grSD.addQuery('element','=',strAppScope+'_'+strColumn);&#13;
		grSD.query();&#13;
		while (grSD.next())&#13;
		{&#13;
			grSD.sys_scope = strScope;&#13;
			GlideRecordUpdate(grSD);&#13;
		}&#13;
	}&#13;
&#13;
	function AppBuilderDataSilosAddFieldACL(strAppScope, strTable, strFieldName, strFieldSysId,strOperation)&#13;
	{&#13;
		strAppScope = GetStringValue(strAppScope);&#13;
		strTable = GetStringValue(strTable);&#13;
		strFieldName = GetStringValue(strFieldName);&#13;
		strFieldSysId = GetStringValue(strFieldSysId);&#13;
		strOperation = GetStringValue(strOperation);&#13;
&#13;
		Log('Working on ACL for "'+strOperation+'" operation...');&#13;
		var strAclName = strTable+'.'+MakeColumnName(strFieldName);&#13;
		var strAclSysId = '';&#13;
		var grSSA = new GlideRecord('sys_security_acl');&#13;
		grSSA.addQuery('type','=','record');&#13;
		grSSA.addQuery('operation','=',strOperation);&#13;
		grSSA.addQuery('name','=',strAclName);&#13;
		grSSA.query();&#13;
		if (grSSA.getRowCount() != 0)&#13;
		{&#13;
			grSSA.next();&#13;
			strAclSysId = GetStringValue(grSSA.sys_id);&#13;
			Log('ACL for "'+strOperation+'" operation already exists for field "'+strFieldName+'" in table "'+strTable+'".');&#13;
		}&#13;
		else&#13;
		{&#13;
			var grSSA = new GlideRecord('sys_security_acl');&#13;
			grSSA.initialize();&#13;
			grSSA.active = true;&#13;
			grSSA.admin_overrides = true;&#13;
			grSSA.advanced = false;&#13;
			grSSA.name  = strAclName; &#13;
			grSSA.operation = strOperation;&#13;
			grSSA.sys_scope = strAppSysId;&#13;
			grSSA.type = 'record';&#13;
			strAclSysId = GlideRecordInsert(grSSA);&#13;
			Log('Adding ACL for "'+strOperation+'" operation for field "'+strFieldName+'": '+RenderValue(strAclSysId));&#13;
		}&#13;
&#13;
&#13;
		if (IsValidSysId(strAclSysId) == true)&#13;
		{&#13;
			var grRoleManager = GetRoleRecord('x_snc_datasilos.manager');&#13;
&#13;
			if (IsValidRecord(grRoleManager) == true)&#13;
			{&#13;
				// Add Role&#13;
				Log('Working on ACL role...');&#13;
				var strAclRoleSysId = '';&#13;
				var grSSAR = new GlideRecord('sys_security_acl_role');&#13;
				grSSAR.addQuery('sys_security_acl','=',strAclSysId);&#13;
				grSSAR.addQuery('sys_user_role','=',grRoleManager.sys_id); &#13;
				grSSAR.query();&#13;
				if (grSSAR.getRowCount() != 0)&#13;
				{&#13;
					grSSAR.next();&#13;
					strAclRoleSysId = GetStringValue(grSSAR.sys_id);&#13;
					Log('Role for ACL for "'+strOperation+'" operation already exists for field "'+strFieldName+'" in table "'+strTable+'".');&#13;
				}&#13;
				else&#13;
				{&#13;
					var grSSAR = new GlideRecord('sys_security_acl_role');&#13;
					grSSAR.initialize();&#13;
					grSSAR.sys_scope = strAppSysId;&#13;
					grSSAR.sys_security_acl = strAclSysId;&#13;
					grSSAR.sys_user_role = grRoleManager.sys_id;&#13;
					strAclRoleSysId = GlideRecordInsert(grSSAR);&#13;
					Log('Role for "'+strFieldName+'" ACL for "'+strOperation+'" operation: '+RenderValue(strAclRoleSysId));&#13;
				}&#13;
			}&#13;
		}&#13;
	}&#13;
&#13;
	AppSanity(grApp);&#13;
	&#13;
	Log('Done!');&#13;
	&#13;
	return grApp;&#13;
&#13;
}</script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-09-28 09:53:31</sys_created_on>
        <sys_id>ac1cf47e1b3af810edf3642aab4bcb45</sys_id>
        <sys_mod_count>132</sys_mod_count>
        <sys_name>AppBuilderDataSilos</sys_name>
        <sys_package display_value="DataSilos WORK IN PROGRESS" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy/>
        <sys_scope display_value="DataSilos WORK IN PROGRESS">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_script_include_ac1cf47e1b3af810edf3642aab4bcb45</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-03 15:48:33</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>ac1cf47e1b3af810edf3642aab4bcb45</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-05-02 13:38:10</sys_created_on>
        <sys_id>c61616099315ea10959b7fda2bba1054</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-02 13:38:10</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
