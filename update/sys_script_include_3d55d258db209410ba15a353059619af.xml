<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_datasilos.GetRelatedRecords</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Returns an array of GlideRecord objects of related records based on the given record.&#13;
Related records are parent records and other records associated to the given record.&#13;
Any visibility whitelisting already applied to the given record can then also be applied to the related records.&#13;
The identification of related records is supported for the tables natively supported by DataSilos and through the use of the DataSilos extension point. </description>
        <mobile_callable>false</mobile_callable>
        <name>GetRelatedRecords</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[function GetRelatedRecords(record)
{
	var IsValidRecord = x_snc_devtools.IsValidRecord;
	var RenderValue = x_snc_devtools.RenderValue;
	var IsArray = x_snc_devtools.IsArray;
	var IsValidFunction = x_snc_devtools.IsValidFunction;

	var aRelatedRecords = [];
	
	if (IsValidRecord(record) == false)
	{
		return aRelatedRecords;
	}
	
	
	var gsep = new GlideScriptedExtensionPoint();
	var eps = gsep.getExtensions('DataSilos');
	for (var nEP = eps.length-1; nEP >= 0; nEP--)
	{
		var ep = eps[nEP];
		if (IsValidFunction(ep.GetRelatedRecords))
		{
			var aMoreRelatedRecords = ep.GetRelatedRecords(record);
			if (IsArray(aMoreRelatedRecords) == true)
			{
				var aMoreVerifiedRelatedRecords = [];
				for (var nRecord = 0; nRecord < aMoreRelatedRecords.length; nRecord++)
				{
					if (IsValidRecord(aMoreRelatedRecords[nRecord]))
					{
						aMoreVerifiedRelatedRecords.push(aMoreRelatedRecords[nRecord]);
					}
				}
				return aMoreVerifiedRelatedRecords;
			}
		}
	}		
	
	
	var strTable = record.getRecordClassName(); 
	
	if (strTable == 'incident')
	{
		var grRelatedRecords = new GlideRecord('incident_task');
		grRelatedRecords.addQuery('incident',record.getValue('sys_id'));
		grRelatedRecords.query();
		while (grRelatedRecords.next())
		{
			var strRelatedRecordSysId = grRelatedRecords.getValue('sys_id');
			var grRelatedRecord = new GlideRecord('incident_task');
			if (grRelatedRecord.get(strRelatedRecordSysId))
			{
				aRelatedRecords.push(grRelatedRecord);
			}
		}
	}
	else if (strTable == 'incident_task')
	{
		var strParentSysId = record.getValue('incident');
		var grParent = new GlideRecord('incident');
		if (grParent.get(strParentSysId ))
		{
			aRelatedRecords.push(grParent);
		}
	}
	else if (strTable == 'change_request')
	{
		var grRelatedRecords = new GlideRecord('change_task');
		grRelatedRecords.addQuery('change_request',record.getValue('sys_id'));
		grRelatedRecords.query();
		while (grRelatedRecords.next())
		{
			var strRelatedRecordSysId = grRelatedRecords.getValue('sys_id');
			var grRelatedRecord = new GlideRecord('change_task');
			if (grRelatedRecord.get(strRelatedRecordSysId))
			{
				aRelatedRecords.push(grRelatedRecord);
			}
		}
	}
	else if (strTable == 'change_task')
	{
		var strParentSysId = record.getValue('change_request');
		var grParent = new GlideRecord('change_request');
		if (grParent.get(strParentSysId ))
		{
			aRelatedRecords.push(grParent);
		}
	}
	else if (strTable == 'problem')
	{
		var grRelatedRecords = new GlideRecord('problem_task');
		grRelatedRecords.addQuery('problem',record.getValue('sys_id'));
		grRelatedRecords.query();
		while (grRelatedRecords.next())
		{
			var strRelatedRecordSysId = grRelatedRecords.getValue('sys_id');
			var grRelatedRecord = new GlideRecord('problem_task');
			if (grRelatedRecord.get(strRelatedRecordSysId))
			{
				aRelatedRecords.push(grRelatedRecord);
			}
		}
	}	
	else if (strTable == 'problem_task')
	{
		var strParentSysId = record.getValue('problem');
		var grParent = new GlideRecord('problem');
		if (grParent.get(strParentSysId ))
		{
			aRelatedRecords.push(grParent);
		}
	}	
	else if (strTable == 'sc_request')
	{
		var grRelatedRecords = new GlideRecord('sc_req_item');
		grRelatedRecords.addQuery('request',record.getValue('sys_id'));
		grRelatedRecords.query();
		while (grRelatedRecords.next())
		{
			var strRelatedRecordSysId = grRelatedRecords.getValue('sys_id');
			var grRelatedRecord = new GlideRecord('sc_req_item');
			if (grRelatedRecord.get(strRelatedRecordSysId))
			{
				aRelatedRecords.push(grRelatedRecord);
			}
		}
	}		
	else if (strTable == 'sc_req_item')
	{
		var strParentSysId = record.getValue('request');
		var grParent = new GlideRecord('sc_request');
		if (grParent.get(strParentSysId ))
		{
			aRelatedRecords.push(grParent);
		}
	
		var grRelatedRecords = new GlideRecord('sc_task');
		grRelatedRecords.addQuery('request_item',record.getValue('sys_id'));
		grRelatedRecords.query();
		while (grRelatedRecords.next())
		{
			var strRelatedRecordSysId = grRelatedRecords.getValue('sys_id');
			var grRelatedRecord = new GlideRecord('sc_task');
			if (grRelatedRecord.get(strRelatedRecordSysId))
			{
				aRelatedRecords.push(grRelatedRecord);
			}
		}
	}	
	else if (strTable == 'sc_task')
	{
		var strParentSysId = record.getValue('request_item');
		var grParent = new GlideRecord('sc_req_item');
		if (grParent.get(strParentSysId ))
		{
			aRelatedRecords.push(grParent);
		}
	}			
	
	return aRelatedRecords;
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-04-29 09:13:13</sys_created_on>
        <sys_id>3d55d258db209410ba15a353059619af</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>GetRelatedRecords</sys_name>
        <sys_package display_value="DataSilos" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy/>
        <sys_scope display_value="DataSilos">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_script_include_3d55d258db209410ba15a353059619af</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-02 14:17:35</sys_updated_on>
    </sys_script_include>
</record_update>
