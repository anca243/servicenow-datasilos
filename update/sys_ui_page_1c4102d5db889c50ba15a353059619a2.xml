<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_page">
    <sys_ui_page action="INSERT_OR_UPDATE">
        <category>general</category>
        <client_script/>
        <description/>
        <direct>false</direct>
        <endpoint>x_snc_datasilos_manual.do</endpoint>
        <html><![CDATA[<?xml version="1.0" encoding="utf-8" ?>
<j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null">
<div style="padding-left: 20px;">
<span style="visibility: hidden;">_CUT_HERE_</span>
	<g2:no_escape>$[
		var docapi = new x_snc_devtools.DocumentationAPI('dafbffebdbb78450ba15a353059619eb');
		docapi.RenderHeader();   
	]</g2:no_escape>	

	<p>Welcome to DataSilos - created and maintained by&#160;<a href="mailto:sascha.wildgrube@servicenow.com">Sascha Wildgrube</a>.</p>
	<p>The DataSilos application helps to separate data between different organizational units - so called&#160;<b>data silos</b>.</p>
	<p>In contrast to domain separation DataSilos allows the exchange of data (in form of individual records) between data silos and makes them visible to users on a need-to-know basis.</p>
	<p>In addition to the organizational dimension, access to records can also be controlled based on security clearance levels. Each record and each user has a security clearance level. A user can only access a record if their security clearance level is equal or higher than the record's security clearance level.</p>
	
	<h2>Disclaimer</h2> 
	<g2:no_escape>$[docapi.RenderDisclaimer()]</g2:no_escape>
	
	<h2>Use DataSilos if</h2>
	<ul>
		<li>Domain Separation is too strict</li>
		<li>Domain Separation is already implemented for a different purpose and more detailed visibility rules must be enforced WITHIN a domain</li> 
		<li>There is a certain level of collaboration taking place between organizational units</li>
		<li>Visibility of individual records can be defined by a user's assignment to groups</li>
	</ul>
	<h2>Do NOT use DataSilos if</h2>
	<ul>
		<li>The different organizational units shall NEVER exchange any records (in that case Domain Separation may be considered)</li>
		<li>Visibility of data should be controlled by specific user roles</li>
	</ul>
	
	<h2>Supported Processes</h2>
	<ol>
		<li>Incident</li>
		<li>Change Request</li>
		<li>Problem</li>
		<li>Service Catalog Requests (not the Catalog itself)</li>
	</ol>
	
	<h2>How DataSilos controls access</h2>
	
	<h3>Organizational Dimension</h3>
	<p>In the organizational dimension user access to records is controlled on the basis of a user's group memberships and whether the user is directly associated to a record (e.g. because the user created the record).</p>  
	<p>Users are members of groups. Groups can be associated to data silos by a silo manager. Each association between a group and a data silo has a type. Whether an individual user can see a record of a supported process depends on the type of their group's association with a silo.</p>
	<p><b>Member:</b>&#160;Users in groups that are associated to a silo as type "Member" can only see those records that are or were directly assigned to that group.</p>
	<p><b>Fulfiller:</b>&#160;Users in groups that are associated to a silo as type "Fulfiller" can see all records that have been initially assigned to groups that are associated to the same silo. And they see all records that have ever been assigned directly assigned to their group. As a result, fulfillers have an overview of all work that originates from the same silo. However, fulfillers do not see any records that have been created in another silo and assigned to another team within the fulfiller's silo.</p>
	<p><b>Supervisor:</b>&#160;Users in groups that are associated to a silo as type "Supervisor" can see all records that have ever been assigned to any group of the same silo. As a result, supervisors have an overview of all work originating and/or that is conducted in their silos. This includes all records that have been created in other silos and that have been assigned to the supervisor's silo.</p>
	<p>A hierarchy or network of silos can be defined. Silo-to-silo relationships can be defined between "super" silos to "sub" silos. Supervisors in the "super" silo are granted access to all records whitelisted for the "sub" silo. These relationships can be bi-directional, so both strict hierarchies and all other forms of networks can be described.</p>
	<p>Note that silo-to-silo relationships are not inherited. If silo "A" supervisors can access sub silo "B" records, and silo "B" supervisors have access to silo "C" records, silo "A" supervisor do not automatically get access to silo "C" records - unless a relationship between silo "A" and silo "C" is explicitly defined.</p>

	<h3>Security Clearance Dimension</h3>
	<p>Access to records can also be controlled based on individual user security clearance levels. The security clearance level is a numeric value. All users and all records have level 0 by default. If a record is set to a higher level, it can only be seen by users who have an equal or higher security clearance level.</p>
	<p>DataSilos does not actively set the security clearance level when records or users are created. This should be done by a customer specific customization. But whenever two records are linked (like an incident task being associated to an incident) the highest security clearance level requirement of all related record is inherited. As a result, all related records will then have the highest security clearance level requirement of all related records.</p>
	<p>Security clearance-based filtering and the organizational dimension are combined. If one of the two denies access, no access is granted. This may result in records not being visible even to the user who created it.</p>
	
	<h2>Why DataSilos is probably the better solution</h2>
	<p>Many solutions have been built over time by ServiceNow customers and ServiceNow consultants. Some of them at some point in time ran into either performance or maintenance issues. Here is why DataSilos is likely superior to many comparable solutions in the past:</p>
	<ol>
		<li>Many existing solutions reflected the complexity of the rules directly in the modified query with severe impact on performance. DataSilos separates the complexity of access control rules from the actual query. The rules are applied when records change, not when they are queried by the user.</li>
		<li>With an increasing number of records in a table, queries take longer - that can't be avoided. DataSilos always uses the same query pattern which remains unchanged even if the access rules change. As a result, indices and query hints can be applied on database level to improve performance.</li>
		<li>DataSilos also covers corner cases when field values from records are included in a request to another table (dot walking) or when records are presented to ACLs incompletely. DataSilos considers these cases.</li>
		<li>DataSilos can handle the derived tables of tables in scope for filtering.</li> 
		<li>DataSilos also protects database views which contain tables that should be filtered. Most existing solutions did not cover that aspect and eventually left records unprotected when database views were in use.</li>
		<li>Business rules and ACLs must be used in combination to cover all scenarios. Many solutions miss one of the two.</li>
		<li>When ACLs are used to control access based on a general access rule, these rules must be checked in every ACL on a given table. If just one ACL does not also check the filtering rule, access might be granted to users which should not access the record. DataSilos uses ATF tests to verify that all ACLs of a table are configured correctly and can help to prevent that future changes open up security issues.</li>
	</ol>
	
	<h2>System Requirements</h2>
	<ul>
		<g2:no_escape>$[
			docapi.RenderSystemRequirements(
				'Tokyo, Utah',
				true,
				AppGetDependencies());
		]</g2:no_escape>	
	</ul>
	
	<h2>Protection Mechanisms</h2>
	<p>The following mechanism are applied to enforce the filtering:</p> 
	<h3>Before Query Business Rules</h3>
	<p>DataSilos has business rules that modify the query which is used to retrieve data for a table in scope from the database. Before query business rules are triggered whenever a user or background job requests data explicitly from a table. However, before query business rules are not triggered if data from a table is integrated into the response for a different table - e.g. if fields from a referenced record are used in a list view or form.</p>
	<h3>ACLs</h3>
	<p>Since before query business rules are not always triggered when retrieving data from a given table, ACLs are in place to perform a check on every single record that is delivered back from the database. This inlcudes cases where fields are joined from other tables via dot-walking or reference fields.</p>
	<p>It's in the nature of ACLs to allow access to a table, record, or specific field if there is at least one ACL that grants access. This means that the DataSilos specific logic must be considered in every single ACL of a table in scope. And that implies that the protection mechanism is always in danger to be compromised by later changes to the platform. New or changed features might require new ACLs to be added or existing ones to be modified. A developer who is not aware of the role ACLs play for DataSilos filtering might easily remove (or not add) the required logic to the ACL script. To mitigate this, DataSilos contains ATF tests that check the configuration of all relevant ACLs. However, it is crucial that these tests are execute as part of the regular development and deployment process.</p>
	<h3>Database View Protection</h3>
	<p>Database views need to be protected explicitly. The before query business rule of a table are not triggered if a database view is used to retrieve data from a table. ACLs are triggered when records are retrieved through a database view - but the records being presented to the ACL script are incomplete, so specific logic must be applied when checking records within database views.</p>
	<p>In order to apply the filtering on records when using database views DataSilos uses a background job to configure business rules for all databse views automatically. In addition it adds the fields to the table view configuration of a databse view if required. As a result, no additional manual configuration is required to protect data delivered via database views.</p> 
	
	<h2>Implementation Guide</h2>
	<h3>Analysis</h3>
	<p>The following aspects and topics should be considered when implementing the DataSilos application:</p>
	<ol>
		<!-- SCOPE -->
		<li>What data (which specific tables) should be separated and what data should be shared across the organization?</li>
		
		<!-- ACCESS RULES -->
		<li>How should access be sliced and structured? What silos will exist?</li>
		<li>Who should have which access within a silo?</li>
		<li>HR, information security or other special stakeholder groups might have additional requirements. Have these been considered?</li>
		<li>Are security clearance levels of individual users to be considered to access records?</li> 
		<li>How should external suppliers and vendors be affected? The specific rights and roles of users associated to external suppliers and vendors should be considered.</li>
		<li>If Domain Separation is already installed or the plan is to use both solutions in combination: Which specific security aspects should be covered by Domain Separation and which should be covered by DataSilos?</li> 
		
		<!-- BASE DATA QUALITY -->
		<li>Does the existing group structure support the later silo configuration? Are groups missing? Are there duplicates?</li>
		<li>Are users are assigned to multiple groups? Will that result in expected and intended behavior?</li>
		<li>Are there users without any assignment groups? Such users might lose access that they currently have.</li>
		
		<!-- OPS -->
		<li>Who is responsible to define the data silos and can provide a mapping to groups? In large organizations this might be a challenging task - especially if there are multiple systems of record from which organization data is retrieved and imported into the ServiceNow instance.</li>
		<li>Who should be responsible to maintain the silo configuration? Which processes might be affected? What must happen if new groups are being created in the future?</li>
		<li>Should data silo configuration be automated - maybe as part of existing processes that integrate organizational data into the platform?</li>
		<li>Should all groups be considered for filtering? Are there groups which should be ignored?</li>
		<li>Does a process exist to manage groups? Consider the process implications once a group must also be assigned to a silo.</li> 
		<li>Do naming conventions exist? How should group silos be named?</li>
		<li>What should happen with records in supported tables that do not have an assignment group - and hence may be invisible to most users?</li>
		<li>Which impact will DataSilos have on the onboarding of parts of the organization that do not yet use ServiceNow yet (or not yet actively)? Can plans and arrangements be made already for that future scenario?</li>

		<!-- TECHNICAL -->
		<li>Are there any before/query business rules that serve comparable purposes? Should they be replaced?</li>
		<li>Are there any customized ACLs in place?</li>
		<li>Which integrations exist and how will (or should) they be impacted? Keep in mind that technical users used for integrations will also be affected by access restrictions applied by DataSilos.</li>
		<li>Which database views exist that contain tables which are in scope? Should data segregation be applied to views?</li>
		
		<!-- PERFORMANCE -->
		<li>How many records are in the tables in scope? Any number higher than approx. two Million should raise concerns as queries might become slow. Can records be archived?</li>
		<li>How many database indexes are "left" on the tables in scope? Often there is a maximum of 64 indexes per physical database table. Are there enough indexes left to apply recommended optimizations?</li>
		
		<!-- REPORTING AND PA -->
		<li>What reports are maintained and run and by whom? Consider the impact of data segregation on reports!</li>
		<li>Is Performance Analytics being used? What impact on Performance Analytics dashboards is expected?</li>
		
		<!-- COMMERCIAL -->
		<li>DataSilos introduces new roles (admin, manager etc.). What implication does it have to your license and user access management processes?</li> 
		
		<!-- GO LIVE -->
		<li>Consider that before DataSilos is activated, existing records must be initialized - i.e. their whitelists must be populated so that visibility is not prevented for users who should have access. Do existing records have sufficient information to apply the visibility rules? Can all records be updated? Would such updates trigger unnecessary notifications?</li>
	
	</ol>
	<h3>User Stories</h3>
	<p>The following list of user stories is a recommendation based on previous DataSilos implementations. It should be extended and modified based on the findings of the analysis.</p>
	<ol>
		<li>As the CISO I must ensure that incidents/problems/changes/... are only visible to specific groups of users.</li>
		<li>As the CISO I must ensure that specific rules are applied to control the initial visibility of records.</li>
		<li>As the CISO I must ensure that specific groups are NOT considered to control visibility.</li>
		<li>As the CISO I want to allow users who raised an incident/problem/change/... to access it.</li>
		<li>As the CISO I must ensure that users can only access records according to their security clearance level.</li>
		<li>As the CHRO I demand that only entitled users can access records that contain sensitive HR-related data.</li>
		<li>As the platform owner I want to ensure that all relevant groups are set up and users are assigned to groups.</li>
		<li>As the platform owner I want to ensure that all relevant silos are set up and groups are assigned to silos.</li>
		<li>As the platform owner I want to have a comprehensive documentation on DataSilos, its dependencies and customizations.</li>
		<li>As the platform owner I want ServiceNow developers from my organization to be trained to maintain and support the solution.</li>
		<li>As the platform owner I want to ensure that future changes do not break the data segregation logic (e.g. by adding additional ACLs that bypass filtering).</li>
		<li>As the platform owner I want to reduce customizations. When upgrading to future releases we need checks if DataSilos can be replaced by OOTB features.</li>
		<li>As the platform owner I want to ensure that users have access from day one. This requires initializing all records before go-live.</li>
		<li>As the platform owner I want to ensure that no records become totally inaccessible to everyone. Maintenance jobs should always run.</li>
		<li>As the platform owner I want to ensure that scheduled jobs are run using a technical user of my choice.</li>
		<li>As the platform owner I want to ensure maintenance job performance. Database indices for the last_maintenance fields should be added to all tables.</li>
		<li>As the platform owner I must ensure that all records in all tables in scope can be updated by the maintenance jobs.</li>
		<li>As the platform owner I want to reduce manual work. Where possible users should be assigned to groups automatically.</li>
		<li>As the platform owner I want to reduce manual work. Where possible groups should be assigned to silos automatically.</li>
		<li>As the platform owner I want to reduce manual work. User's security clearance levels should be set automatically.</li>
		<li>As the platform owner I want to ensure platform performance. One aspect is the consolidation of multiple ACLs into one.</li>
		<li>As the platform owner I want to ensure platform performance. One option is to add database indexes to optimize query performance.</li>
		<li>As the platform owner I want to ensure that existing and future database views do not bypass access restrictions.</li>
		<li>As the platform owner I want to ensure stability by running all related ATF tests as part of the development and deployment process.</li>
		<li>As the platform owner I want to ensure stability and consider running all related ATF tests to monitor production.</li>
		<li>As the platform owner I want to ensure that existing integrations continue to work as expected.</li>
		<li>As the platform owner I want to ensure that maintenance jobs do not trigger unnecessary notifications.</li>
		<li>As the platform owner I want to automate the steps required during installation.</li>
		<li>As the QA manager I need existing tests (both manual and automated) are updated to reflect the new expected behavior.</li>
		<li>As the QA manager I need new (manual and/or automated) tests to verify the new access restrictions work as expected.</li>
		<li>As an operations user I want to be informed and trained properly so that I can operate the solution going forward.</li>
		<li>As an operations user I need documented incident models and operational procedures to deal with issues being raised during operations.</li>
		<li>As an operations user I need a process in place to manage user accounts that considers the new roles and eventually the need for new group memberships.</li>
		<li>As an operations user I need a process in place to manage groups and their association to silos on a day-to-day basis.</li>
		<li>As a user I need access to records even if I have not been part of any group in the past.</li>
		<li>As a user I want to be informed about the introduction of data segregation and to know what that means to me and my work.</li>
		<li>As the incident manager I want to make specific incidents (e.g. major incidents or incidents with the highest priority) visible to everyone in the organization.</li>
		<li>As the one responsible for reporting and performance analytics I want to make sure that reports and dashboards work as expected.</li>
	</ol>
	<h3>Preparing Validation</h3>
	<p>The following spects should be considered for testing and validation:</p>
	<ol>
		<li>DataSilos modifies queries being sent to the database in order to implement the visibility filtering. These modifications come at a performance cost. Depending on how many teams (and silos) a user is a member of and depending on how many records are in the table, the performance impact might be visible to users. IT IS STRONGLY RECOMMENDED TO PERFORM A REALISTIC LOAD TEST! A simulation of actual user behavior in a production-like instance with production-like configuration can show if the performance impact is acceptable.</li>
		<li>It is recommended to identify pages and views that are most frequently used by users - both for automated and manual user acceptance testing.</li> 
		<li>Functional test cases should proof that specific records are visible to specific user groups AND that other records are explicitly NOT visible to other user groups.</li>
		<li>Functional test cases should cover scenarios in which records are passed from one silo to another.</li>
		<li>Functional and performance tests for dashboards.</li>
		<li>Functional tests on existing reports and Performance Analytics based dashboards.</li> 
		<li>Any existing test cases (that relate to the supported tables) should be executed as part of the QA. Behavior that was expected in the past may no longer be working with active filtering. In some cases, the silo configuration might have to be reviewed, in other cases, the test cases might have to be updated.</li>
		<li>It is strongly recommended to use specific test users and test groups for functional testing. Do not reuse users or groups from other tests!</li>
	</ol>
	<h3>Installation</h3>
	<p>Before installing, verify if there is a plugin scoped app that contains specific customizations and additions relevant to your organization's instance and which may come with its own installation instructions. In such cases, follow the installation instructions shipped with the custom scoped app.</p>
	<p>Please note that is it NOT RECOMMENDED to deploy DataSilos and related scoped apps using update sets. Use source control instead!</p>
	<ol>
		<g2:no_escape>$[
			docapi.RenderInstallationInstructionsImportFromSourceControl(
				'DevTools',
				'https://github.com/saschawildgrube/servicenow-devtools',
				true,
				'https://www.wildgrube.com/servicenow-devtools');
		]</g2:no_escape>
		<g2:no_escape>$[
			docapi.RenderInstallationInstructionsImportFromSourceControl(
				'DataSilos',
				'https://github.com/saschawildgrube/servicenow-datasilos');
		]</g2:no_escape>
		<li>Elevate roles to security_admin</li>
		<li>Go to "DataSilos/Access Control (ACL)" and check if there are any ACLs in the "DataSilos" application scope that refer to OOTB tables (e.g. incident, incident_task, etc.) with a name like e.g. incident.* (This is "incident DOT asterix"). If you see some, they must be deleted. Do NOT delete any ACLs that refer to any x_snc_datasilos* fields (like e.g. x_snc_datasilos_group_whitelist). A platform bug eventually creates them during installation and associates them to the app scope. Note that they cannot be deleted directly, because the platform denies any change to an ACL that refers to a table in the global scope from within an application scope. Use the following trick: Change the table to "Data Silos" then "Save" and then "Delete" them.</li>
		<li>Switch to global scope</li>
		<li>Create a new update set in the global scope to capture all changes related to the DataSilos installation. In case some of the ACLs reside in different scopes, you might have to create additional update sets for these scopes to capture all changes.</li>
		<li>WARNING: In the following steps, a script is going to make changes to existing scripts within ACLs or add scripts to ACLs. Verify that you have sufficient test coverage in place to confirm regression safety.</li>
		<g2:no_escape>$[
			docapi.RenderInstallationInstructionsAppInstall();
			]</g2:no_escape>
		<li>Check out if there are any errors or warnings in the script output.</li>
		<li>If there are ACLs which have not been modified automatically, then perform the steps listed below for each of the supported tables (including but not limited to the following):</li>
<pre>
incident
incident_task
change_request
change_task
problem
problem_task
sc_request
sc_req_item
sc_task
</pre>
		<ol>
			<li>At least two ACLs for the&#160;<b>read</b>&#160;operation must exist for each table:&#160;<b>table_name</b>&#160;and&#160;<b>table_name.*</b>. Ideally only ONE ACL exists for&#160;<b>table_name</b>&#160;and&#160;<b>table_name.*</b>&#160;(Note it is "table_name DOT asterix") for the&#160;<b>read</b>&#160;operation. You may have to create or change existing ACLs or consolidate multiple ACLs into one. Either way: make sure that all active ACLs contain the following script logic.</li> 
			<li>Activate "Advanced" (if not active already) and add the following script:</li>
<pre>
answer = x_snc_datasilos.ExecuteACL(current);	
</pre>
			<li>If the ACL already contains a script, you will need to combine the DataSilos specific code with the existing script. You should use the following template:</li>
<pre>
var bAnswer = false;

/* Enter your (existing) code here! Make sure you set bAnswer (and not answer)! */
bAnswer = your_code;	

if (bAnswer == true)
{
	bAnswer = x_snc_datasilos.ExecuteACL(current);
}
answer = bAnswer;
</pre>
			<li>CAUTION: setting the response variable "answer" sometimes only works ONCE during a script. To avoid any issues, it is recommended to set the "answer" value only once at the end of the script.</li>
		</ol>
		<li>In case the default "System Administrator" user does no longer exist, is deactivated or should not be used to run scheduled jobs, identify a technical user that should be used to run scheduled jobs and configure the user for all DataSilos related jobs.</li>
		<li>If possible, activate the DataSilos app in the options and then go to "Test Suite" and execute all tests. Fix any issues reported by the tests. If needed deactivate the DataSilos app after running all tests. The following list may help you to troubleshoot failing tests:</li>
		<ul>
			<li>If tests fail directly on the first step it means that DataSilos (or the specific table) has not been configured to be active.</li>
			<li>Tests may fail because the scoped app "DevTools" has not been installed or not properly set up. Have all relevant tables been configured to allow cross-scope access from all scopes? Check out the DevTools installation guide for more details.</li>
			<li>In rare occasions the ATF engine fails to remove test data that has been created during a test. This may result in test data being left over in several tables. The test "Test data sanity" can help to find such records. These records must be deleted manually.</li>
			<li>Tests may fail because test data records cannot be created. One reason are customized fields which are configured to be required when creating a record. To resolve this, you can create business rules that populate these fields when new records are created. You may want to check if the name or short description starts with "_ATF_DATASILOS_" to determine records that are created during DataSilos specific tests.</li>
			<li>Tests may also fail to to restrictions that result from other before query business rules. Try deactivating them to see what happens. Maybe additional configuration on users, groups or roles are needed.</li>
			<li>Also consider restrictions resulting from Domain Separation. DataSilos can be used in combination with Domain Separation - however make sure that test data records are all created in the same domain.</li>
		</ul>
		<li>Set all update sets to complete.</li>
		<li>Optimize the database:</li>
		<p>There are two options:</p>
		<ol>
			<li>Let DataSilos automatically create recommended indexes by setting the system property&#160;<a href="/sys_properties.do?sys_id=b55aef1cdb4074d0bc44d844ca96194b" target="_blank">x_snc_datasilos.database_indexes.active</a>&#160;to true.</li>
			<li>Raise a case with ServiceNow support (or in case you run your instance on-premise with your internal database support team) and ask for the following:</li>
<pre>
Hello,
	
as part of the installation of DataSilos, optimization on database level is required.

Please execute the following background script in the x_snc_datasilos scope to trigger queries that may need optimization:
	
x_snc_datasilos.Log(x_snc_devtools.RenderValue(x_snc_datasilos.GetStatusPerformance()));

Check out the time required to execute the different queries.
	
The "backmarker" queries return exactly one record and should not take more than 50ms.
This can be achieved by adding a database index on the "Last Maintenance" fields.
On tables that are derived from the "task" table, a combined index with the "sys_class_name" field is recommended.
	
All other queries should not take more than 500ms each.
Please check if additional indices and query hints can be used to optimize these queries.
	
Please note that all options for code-level optimization have already been exhausted.
The queries are already the fastest and most efficient known way to fulfill customer requirements. 

Thank you very much.
	
Best regards,
</pre>	
		</ol>
		<li>After the database optimization is in place and the maintenance scripts are running at full speed, navigate to the DataSilos log and check if there are messages that indicate aborting maintenance scripts. The log entry will state the sys_id of the record that is blocking the maintenance script. All data issues in existing records must be fixed so that the maintenance script can process all records in the table continuously.</li>	
		<li>Navigate to "DataSilos/Status" and verify that there are no active tables that are marked "incomplete". Do not proceed until all records have been processed at least once.</li> 
	</ol>
	<h3>Configuration</h3>
	<ol>
		<li>Assign the x_snc_datasilos.manager role to users who are tasked to configure the silos.</li>
		<li>As a data silos manager go to the "Data Silos" module and configure all data silos. Add the corresponding groups to each data silo. Groups associated to a data silo are either&#160;<b>Member</b>,&#160;<b>Fulfiller</b>&#160;or&#160;<b>Supervisor</b>&#160;groups. This can also be done automatically or via data import.</li>
		<li>Setup silo-to-silo relationships where appropriate. Supervisors in a super silo also get access to the associated sub silo.</li>
		<li>Assign the x_snc_datasilos.sentinel role to technical users where applicable. They will not be affected by any filtering.</li>
		<li>Assign the x_snc_datasilos.sentinel role to users who are tasked to create reports and hence must access all data where applicable.</li>
		<li>Go to "Options" and choose if the maintenance jobs should be active or not. As a general rule of thumb, it's always a good idea to let them run UNLESS they cause a performance degradation. If there are already records in the tables in scope, the maintenance jobs need to run and process every record at least once to make sure all records are initialized (and hence visible). After initial processing of all existing records, the business rules on the affected tables should ensure that all records are visible to eligible users, however sometimes unexpected situations occur - like an import of data from an external system without triggering business rules etc. The maintenance jobs make sure that such events don't leave records invisible to users.</li>
		<li>Go to "ITSM Options" and configure the tables. Which tables should be affected by filtering? Which fields should be considered for instant access and whitelisting?</li>
		<li>Go to the "Status" page to verify the configuration settings.</li>
	</ol>
	<h3>Activation</h3>
	<ol>
		<li>Go to "Options" and activate the maintenance jobs. Wait until all existing records have been initialized by checking the oldest date in the "Last Maintenance" field. The "Status" page provides an overview on the progress of the initial maintenance.</li>
		<li>Go to the "Options" module and activate the DataSilos application.</li>
		<li>Deactivate any existing conflicting business rules that may have been identified earlier.</li>
		<li>Go to "Test Suite" and execute all tests.</li>
	</ol>
	<h3>Rollback</h3>
	<p>In case anything goes terribly wrong after activation, follow these steps:</p>
	<ol>
		<li>Activate ATF testing and run all tests (in production!) to verify that the installation and functionality works from the perspective of the DataSilos application.</li>
		<li>Go to the "Options" module and DEACTIVATE the DataSilos application.</li>
		<li>If this does not resolve the issue, deactivate all "DataSilos" business rules and UNDO all changes done to ACLs.</li>
		<li>If this still does not resolve issues - the root cause is probably somewhere else. However, at this point one could remove the DataSilos application as a whole – BUT KEEP IN MIND THAT THIS WILL IRREVOCABLY DELETE ALL WHITELIST INFORMATION!</li>
	</ol>
	
	<h3>Uninstall</h3>
	<p>DataSilos modifies ACLs in various tables outside the DataSilos scope. Hence uninstalling the application is NOT sufficient to remove DataSilos from an instance. Follow these steps to uninstall DataSilos:</p>
	<ol>
		<li>Deactivate the scheduled job&#160;<a href="/sysauto_script.do?sys_id=2d0f7525dbb43058bc44d844ca961934" target="_blank">DataSilos - Maintenance</a>. This is to prevent any further updates to ACLs.</li>
		<li>Run the following script as a background script to undo any modifications to ACLs made by DataSilos:<pre>
var grACL = new GlideRecord('sys_security_acl');
grACL.addQuery('script','CONTAINS','x_snc_datasilos.ExecuteACL(current)');
grACL.addQuery('script','DOES NOT CONTAIN','/* x_snc_datasilos.ExecuteACL(current) */');
grACL.query();
while (grACL.next())
{
    gs.info('ACL: '+grACL.sys_id+ ': ' + grACL.getDisplayValue());
    gs.info('Current script: '+grACL.script);
    var strScript = grACL.getValue('script');
    var strScriptNew = strScript.replace('x_snc_datasilos.ExecuteACL(current)','true /* x_snc_datasilos.ExecuteACL(current) */');
    gs.info('New script: '+strScriptNew);
    grACL.script = strScriptNew;
    grACL.update();
}</pre>
		</li>
		<li>Delete the application "DataSilos" from the instance via Studio.</li>
	</ol>

	<h2>Reference</h2>
	
	<h3>Roles</h3>
	<g2:no_escape>$[docapi.RenderRoles()]</g2:no_escape>	

	<h3>UI Actions</h3>
	<g2:no_escape>$[docapi.RenderUIActions()]</g2:no_escape>		
	
	<h3>Configuration Options</h3>
	<g2:no_escape>$[docapi.RenderProperties()]</g2:no_escape>
	
	<h3>Scheduled Jobs</h3>
	<g2:no_escape>$[docapi.RenderScheduledJobs()]</g2:no_escape>
	
	
	<h3>Table Columns</h3>
	<p>Each supported table is equipped with several new columns to support DataSilos filtering:</p>
	<ul>
		<li><b>x_snc_datasilos_global</b>&#160;The global visibility flag controls if this record should be globally visible - i.e. it can be seen by all users without any exception. This flag can be useful to make very important incidents public to everyone.</li>
		<li><b>x_snc_datasilos_supervisor_whitelist</b>&#160;The supervisor whitelist field stores a list of data silos. The users in the supervisor groups within the data silos will be able to access the record.</li>
		<li><b>x_snc_datasilos_fulfiller_whitelist</b>&#160;The fulfiller whitelist field also stores a list of data silos. The users in the fulfiller groups within the data silos will be able to access the record.</li>
		<li><b>x_snc_datasilos_group_whitelist</b>&#160;The group whitelist field stores a list of groups which should have access to the record.</li>
		<li><b>x_snc_datasilos_security_clearance</b>&#160;The security clearance field defines the required security clearance level that a user must have to be allowed to see a record.</li>
		<li><b>x_snc_datasilos_ghost</b>&#160;The ghost flag controls if the record's whitelists should be updated. If set to false, whitelists are populated. If the ghost flag is true, whitelists remain unchanged. This allows custom implementations to control the whitelist population. If this flag is set to true, the record behaves in the same way as if it was changed by a user with the x_snc_datasilos.ghost role.</li>
		<li><b>x_snc_datasilos_last_maintenance</b>&#160;The last maintenance field stores the last point in time when the record has been "maintained" - that is when the corresponding scheduled maintenance job applied the visibility rules to the record.</li>
	</ul>
	
	<h2>FAQ</h2>
	<h3>What happens if a user is not associated to any group?</h3>
	<p>The user will only see records that they created (opened_by) or which have been created on their behalf (caller_id). Those users will not see any other records unless that user has the admin role or the x_snc_datasilos.sentinel role.</p>
	<h3>What happens if a record is not associated to any group?</h3>
	<p>Only users who created that record or have the admin role will see this record.</p>
	<h3>How does it actually work?</h3>
	<p>DataSilos modifies all queries sent to the database of the tables in scope. Once the data comes back, the same filter logic is applied in ACLs. DataSilos adds several fields to all relevant tables that contain whitelists of groups and silos, the flag for global visibility, the security clearance level requirement and other relevant information. Whenever records are created or changed, these fields are updated according to the configured rules - if the ghost flag is not set for the record.</p>
	<h3>How do I apply my own visibility rules on records?</h3>
	<p>DataSilos implements a default behavior whenever a record is created or updated. Whitelists are extended and the security clearance level requirement is increased if a record is related to another record with a higher security clearance level. Some of that behavior can be configured using system properties. If you need a completely different behavior you can create a business rule that is triggered before a record is inserted or updated. In this business rule, set the ghost flag to true and populate the whitelists, security clearance level, and global flag as required. When the ghost flag is set to true, DataSilos will not make any further changes to the record.</p>

	
	
	<h2>Runbook</h2>
	<h3>Incident Models</h3>
	<h4>Instance not responding / Severe performance issue</h4>
	<h5>Symptoms</h5>
	<ul>
		<li>The instance is completely unavailable.</li>
		<li>Some requests take extremely long to be answered.</li>
		<li>Large amount of expensive database queries.</li>
	</ul>
	<h5>Procedure</h5>
	<ol>
		<li>Independently of whether DataSilos is the root cause, deactivating DataSilos completely may be considered as an emergency option. This should be aligned with stakeholders as this will (temporarily) expose the organization to legal or compliance risks.</li>
		<li>Deactivate DataSilos by setting the&#160;<a href="/sys_properties.do?sys_id=c7949581db805c50ba15a353059619da" target="_blank">x_snc_datasilos.active</a>&#160;property to "false".</li>
	</ol>
	<h4>Technical integration does no longer work as expected</h4>
	<h5>Symptoms</h5>
	<ul>
		<li>A technical integration has suddenly stopped to work as expected.</li>
		<li>Some records that should be exposed to a 3rd party system can no longer be accessed.</li>
	</ul>
	<h5>Procedure</h5>
	<ol>
		<li>Identify the technical user(s) which are used as part of the integration.</li>
		<li>Check if the technical user has the required access.</li>
		<li>If not done already, consider to assign the x_snc_datasilos.sentinel role to such technical users. Keep in mind that this may provide access to the technical user which may not be intended. However, this may be a temporary workaround.</li>
	</ol>
	<h4>Individual users complain about not being able to see specific records</h4>
	<h5>Symptoms</h5>
	<ul>
		<li>A user reports that they do not have access to a specific record.</li>
		<li>After creating a new record, errors are being displayed.</li>
	</ul>
	<h5>Procedure</h5>
	<ol>
		<li>Identify the specific user record.</li>
		<li>Copy the user's Sys ID.</li>
		<li>Navigate to the record. From the form context menu, select "DataSilos Access Analysis" and enter the Sys ID (or user name or email address). The function will explain if and why a user can or cannot see a record based on DataSilos filter mechanisms.</li>
		<li>If the analysis states that the user should be able to see the record (based on DataSilos controlled criteria) but the user cannot access the record, then it is very likely that other (non-DataSilos) related business rules, domain separation or ACLs block the user from accessing that record.</li>
	</ol>
	<h4>ATF test "DataSilos - Test data sanity" fails</h4>
	<h5>Symptoms</h5>
	<ul>
		<li>ATF test "DataSilos - Test data sanity" fails.</li>
	</ul>
	<h5>Procedure</h5>
	<ol>
		<li>Run this script in scope x_snc_datasilos:</li>
<pre>
// Delete DataSilos Test Data
var testdata = new x_snc_datasilos.DataSilosTestDataAPI('_ATF_DATASILOS_');
x_snc_datasilos.Log('Before DeleteAllData(): '+x_snc_devtools.RenderValue(testdata.GetAllData()));
testdata.DeleteAllData(testdata.GetAllData());
x_snc_datasilos.Log('After DeleteAllData(): '+x_snc_devtools.RenderValue(testdata.GetAllData()));
</pre>
	</ol>
	
	<h2>Developer Guide</h2>
	<h3>Entry Points</h3>
	<p>The DataSilos application is implemented in a number of script includes. Most of which contain a single function. The following script includes (i.e. functions) serve as entry points to the application. All other functions are then called from these entry points:</p>
	<ol>
		<li>ExecuteBusinessRule</li>
		<li>ExecuteACL</li>
		<li>Maintenance</li>
		<li>MaintenanceDatabaseViews</li>
	</ol>
	<p>For a more detailed description refer to the DataSilos API Reference below.</p> 
	
	<h3>DataSilos API Reference</h3>
	<p>The following functions can be used to extend and modify out of the box behavior without making any changes to the core implementation. This allows for extensions which are compatible to future versions.</p> 

	<h4>Script Includes</h4>
	<p>
	<g2:no_escape>$[docapi.RenderScriptIncludes()]</g2:no_escape>
	</p>
	
	<h4>Extension Points</h4>
	<g2:no_escape>$[docapi.RenderExtensionPoints()]</g2:no_escape>		
	
	<h3>Extension of Scope</h3> 
	<p>You can extend the scope of the DataSilos application by adding the filtering logic to more tables. You might also modify the regular behavior of DataSilos when working with tables already supported by DataSilos. In either scenario you need to create a DataSilos plugin application. Before you start the implementation, perform the following steps:</p>
	<ol>
		<li>Check if there is a more recent version of DataSilos available that may already cover your requirements.</li>
		<li>Get in touch with the author of the DataSilos application and check if there is work in progress on a new version of DataSilos. Eventually analysis or development work can be re-used or at least knowledge can be shared. Maybe the feature you are considering is already being worked on.</li>
		<li>Identify the specific tables that require protection. Keep in mind that a parent table may already be supported.</li>
		<li>Identify the rules to be used to control access. Is all the information available that is required to apply these rules?</li>
		<li>Identify data sources. Is it based on manual input from users or is data provided via integrations?</li>
		<li>Verify if these sources provide the necessary details that are required to derive the visibility rules.</li>
	</ol>
	<p>After a decision has been made to create a DataSilos plugin application perform the following steps:</p>
	<ol>
		<li>Create a new scoped application in Studio.</li>
		<li>Identify the affected tables</li>
		<li>Create a new script include "AppBuilder" in the new scoped application.</li>
		<li>Implement the AppBuilder function based on the following template:</li>
<pre>function AppBuilder()
{
	x_snc_datasilos.AppBuilder(
		'x_abc_your_app_scope',
		[
			'table1',
			'table2'
		],
		'Your App', // The title of the submenu section
		20000 // The order where your submenu should start
		);				
}
</pre>
		<li>Replace "x_abc_your_app_scope" by the actual app scope identifier.</li>
		<li>Replace "Your App" with a suitable caption for the sub menu within the DataSilos menu.</li>
		<li>Replace "20000" with a reasonable order number where the sub menu should be positioned. Values must be equal or greater than 10000. Please note that if other developers who create DataSilos plugins make the same or very similar choices, there might be collisions - but they can easily be resolved later.</li>
		<li>Add the tables to be supported into the array. Note that you do not need to add tables which are already supported by DataSilos in order to implement deviating behavior for visibility rules. Also keep in mind that if a parent table is already supported, you should not add any derived tables either.</li>			
		<g2:no_escape>$[
			docapi.RenderInstallationInstructionsBackgroundScript('Now build the boiler-plate code and prepare the implementation of your new DataSilos plugin application. Replace x_abc_your_app_scope by the actual scope identifier of your new application.', 'x_abc_your_app_scope.AppBuilder();', 'x_abc_your_app_scope');
		]</g2:no_escape>

		<li>Modify or add your specific code in script include "DataSilosGetConfig". For example, you can specifiy fields that reference users or groups which should impact the visibility of records. You can also modify the configuration of tables which are supported by DataSilos directly. Please note that the modifications to the config object are applied AFTER system properties are read. That means that your implementation has full control over the actual configuration and can override system properties - that may be convenient during development, but it may be confusing for operations teams.</li>
		<li>Modify or add your specific code in script include "DataSilosGetRelatedRecords". Use this function to identify records that are related to a record. By specifying related records you can automatically derive visibility from one record to be applied to its related records (e.g. the task records associated to a story record, etc.).</li>
		<li>Modify or add your specific code in script include "DataSilosRecordInsert" to specify what should happen when a record is inserted. If the default behavior should be applied to a table, no implementation is required.</li>
		<li>Modify or add your specific code in script include "DataSilosRecordUpdate" to specify what should happen when a record is updated or maintained on a regular basis. If the default behavior should be applied to a table, no implementation is required.</li>
		<li>Modify the DataSilos UI list view for the supported tables. It is recommended at add all columns that can help operations teams to understand whether a record should or should not be visible to a user. Whatever column is being used in your visibility rules should be displayed in your UI list view.</li>
		<li>Create ATF tests. The following tests can (and should) be used as templates:</li>
<pre>
DataSilos - installation
DataSilos - implementation
DataSilos - incident - installation
DataSilos - incident - basic
DataSilos - incident - opener, caller and sentinel
DataSilos - incident - global
DataSilos - incident - cross-silo
DataSilos - incident_task - installation
DataSilos - incident_task - basic
DataSilos - incident_task - cross-silo
</pre>
		<li>Add test steps in the "Installation" test to check the ACL configuration for each supported table using the "<a href="/sys_atf_step_config.do?sys_id=5f42f662db23d810ba15a353059619cd" target="_blank">DataSilos - Check ACLs</a>" test step configuration.</li>
		<li>Add test steps in the "Implementation" test to check the table implementations for each supported table using the "<a href="/sys_atf_step_config.do?sys_id=88b932e8db582810ba15a35305961982" target="_blank">DataSilos - Check table implementation</a>" test step configuration.</li>
		<li>Write documentation. Your documentation should be targeted to both developers who might be tasked to extend the application later and to operations teams who need to resolve operational issues and user requests and questions.</li>
	</ol>
	
	<h3>Test Steps</h3>
	<p>DataSilos uses the following customized Test Step Configurations:</p>
	<g2:no_escape>$[docapi.RenderTestStepConfigurations()]</g2:no_escape>
	
	<h2>License</h2>
	<g2:no_escape>$[docapi.RenderCopyright(2020,'Sascha Wildgrube')]</g2:no_escape>
	<g2:no_escape>$[docapi.RenderLicense()]</g2:no_escape>

	
	<h2>Release Notes</h2>

	<h3>3.9.0 - 2025-TODO</h3>
	<ol>
		<li>Renamed menu item "Data Silos" to "Silos" for consistency.</li>
		<li>Added menu item for "Groups".</li>
		<li>Removed the deactivation of the OOTB business rule that prevents before query business rules on cross-scope tables from MaintenanceDatabaseViews() as this is already done by DevTools' AppInstall() script.</li>
		<li>Added chapter "Uninstall" to the manual.</li>
		<li>Fixed several CodeSanity findings.</li>
		<li>Updated ATF tests to match new Test user naming convention.</li>
	</ol>
	
	<h3>3.8.0 - 2023-07-26</h3>
	<ol>
		<li>DevTools 1.65.0 is now required.</li>
		<li>DataSilos has been fully tested in Tokyo and Utah.</li>
		<li>Fixed numerous CodeSanity findings.</li>
		<li>The DataSilos test suite no longer contains the DevTools test suite as a child test suite.</li>
		<li>Log() and Debug() have been refactored to use the new PrepareLogInfo() and PrepareLogDebug() functions.</li>
		<li>The system property "x_snc_devtools.log.active" has been removed.</li>
		<li>Added scheduled jobs to the manual.</li>
		<li>Corrected some mistakes in the manual.</li>
	</ol>
	
	<h3>3.7.0 - 2022-11-07</h3>
	<ol>
		<li>DevTools 1.45.0 is now required.</li> 
		<li>Rome is no longer actively supported.</li>
		<li>Read ACLs for a table are now created during ACL maintenance if they do not exist yet.</li>
		<li>The test step configuration "DataSilos - Check table implementation" treats the "DataSilos Security Clearance" field on the sys_user table in a more flexible way. It is now allowed to use a deviating label for the field and define a choice list. In addition the read ACLs on the field are not checked on the sys_user table as clients may want to define other than standard access controls.</li>
		<li>The test step configuration "DataSilos - Check table implementation" input variable for the table was erroneously limited to 40 characters. This has been fixed. 80 characters are now allowed.</li> 
		<li>The UI action "DataSilos Access Analysis" now uses the better looking DevTools' modal dialogs.</li> 
		<li>The UI action "DataSilos Access Analysis" now uses DevTools' client script function ServerRequest().</li>
		<li>The status page now contains a link to the table's configuration form.</li>
		<li>Improved the layout of the status page.</li>
		<li>AppBuilder() now considers more implementation variants in script includes DataSilosRecordInsert() and DataSilosRecordUpdate() to make sure relevant changes are made when new tables are added.</li>
		<li>AppBuilder() now adds some helpful demo code to function DataSilosGetStatus().</li>
	</ol>	
	
	<h3>3.6.0 - 2022-08-11</h3>
	<ol>
		<li>DevTools 1.42.0 is now required.</li> 
		<li>The extension point now also supports the GetStatus() function which can be used to provide additional status information to be displayed on the status page.</li>
		<li>The UI action "DataSilos Access Analysis" is now also available in the list context menu.</li>
		<li>The ATF test step config "DataSilos - Check ACLs" would also look at ACLs which are not of type "record" - which may lead to false negative test results.</li> 
		<li>Added documentation about the extension point.</li>
		<li>Improved documentation on extending the scope: which tables should be added, which should not.</li>
	</ol>
	
	<h3>3.5.0 - 2022-07-19</h3>
	<ol>
		<li>DevTools 1.41.0 is now required.</li> 
		<li>The MainenanceACL() function unintentionally modified the script contained in non-record type ACLs for a filtered table. This has been fixed.</li> 
		<li>A defect in AccessAnalysisForUserAndRecord() has been fixed that prevented to "DataSilos Access Analysis" UI action to fail.</li>
		<li>Added display of Domain Separation status per table on the Status page.</li>
		<li>The status page now requires the x_snc_datasilos.manager role.</li> 
		<li>Added ATF test for function AccessAnalysisForUserAndRecord().</li>
		<li>Added system property "x_snc_datasilos.logging.verbosity" to control the log level for the application.</li>
		<li>Added guidance on adding test steps in the installation and implementation tests when extending the scope.</li>
	</ol>	
	
	<h3>3.4.1 - 2022-04-25</h3>
	<ol>
		<li>Regression defect caused extension points to be ignored. This has been fixed.</li>
	</ol>
	
	<h3>3.4.0 - 2022-04-25</h3>
	<ol>
		<li>DevTools 1.37.0 is now required.</li>
		<li>Added function GetAllActiveTables().</li>
		<li>GetRelatedRecords() now processes extension point implementations in reverse order to make sure that the implementation with the highest order has ultimate control over the response.</li> 
		<li>GetSecurityClearanceFromUser() is no longer triggering business rules when retrieving user information and uses the transaction cache to store the result.</li>
		<li>Refactoring of code to be more CodeSanity compliant.</li>
	</ol>

	<h3>3.3.0 - 2022-03-10</h3>
	<ol>
		<li>DevTools 1.34.0 is now required.</li> 
		<li>UI Action "DataSilos Maintenance" is now using DevTools' GlideRecordUpdate() in ghost mode to update records - which allows updating records in scoped tables which are not configured for cross-scope access.</li> 
		<li>GetSupportedTable() now uses transaction caching to avoid repetitive database queries and function calls.</li>
		<li>Functions PrepareQuery(), RecordCheckFilter() and RecordCheckAccess() no longer default to the current users if no or an invalid user id is provided.</li>
		<li>AppBuilder() now considers tables that are in the scope of the application.</li>
		<li>The "Start" page has been renamed to "Manual".</li>
		<li>The label of the field storing a user's security clearance level has been renamed to "User Security Clearance" - otherwise one could confuse it with the field the stores the security clearance level of the record itself - if a plugin supports filtering the sys_user table.</li>
		<li>The group filter is now considered in the "Analysis" and "User Stories" chapters in the manual.</li>
	</ol>

	
	<h3>3.2.0 - 2022-02-03</h3>
	<ol>
		<li>Paris is no longer actively supported.</li>
		<li>DevTools 1.32.0 is now required.</li> 
		<li>AccessAnalysis() and the corresponding UI action "DataSilos Access Analysis" now also consider domain separation.</li>
		<li>Roles section in the documentation is now using DocumentationAPI::RenderRoles() function.</li>
		<li>AppBuilder() now checks if a sub menu title is specified and if the sub menu start order is 10000 or higher.</li>
		<li>AppSetDefaults() now sets the "log.active" system property properly.</li> 
	</ol>
	
	<h3>3.1.0 - 2021-12-09</h3>
	<ol>
		<li>DevTools 1.30.0 is now required.</li> 
		<li>A new scheduled job collects status information and stores it in the new status table. The status page displays the status information from the status table if possible which reduces load time of the status page to a minimum.</li>
		<li>Added UI Action "DataSilos Maintenance" to trigger the update of a record's visibility configuration manually.</li>
		<li>GetRelatedRecords() now checks if the records returned from plugins are valid - thus preventing errors caused by invalid records.</li>
		<li>A regression defect caused the test step configuration "DataSilos - Implementation" not to be cross-scope-aware. This has been fixed.</li>
		<li>An unintendedly created table has been removed from the app.</li>
		<li>The function RecordInsert() in the example implementation of the DataSilos extension point was incorrectly named RecordInitialize(). This has been fixed.</li> 
		<li>Added test "DataSilos - Ready" to check if all preconditions are met to run tests in the first place: The user running the tests must not have the x_snc_datasilos.ghost role.</li>
	</ol>
	
	<h3>3.0.0 - 2021-11-19</h3>
	<ol>
		<li>DevTools 1.27.1 is now required.</li> 
		<li>Introduced silo-to-silo relationships with visibility inheritance across silos for supervisors.</li>
		<li>Introduced silo based filtering for fulfillers.</li> 
		<li>Record maintenance no longer triggers business rules, auditing and sys field updates, allowing seamless updated of whitelists on records without triggering any unintended processes.</li>
		<li>The "Status" page now contains links to ACLs, business rules, storage aliases and database indexes for each table.</li>
		<li>The new system property x_snc_datasilos.log.active controls if log output should be produced by DataSilos.</li>
		<li>The new function AppBuilder() can now be used to build scoped apps that extend DataSilos.</li>
		<li>The scheduled job "DataSilos - Maintenance" (formerly "DataSilos - Database view protection") is now maintaining both database view and ACL configuration.</li>
		<li>All relevant ACLs are now reconfigured automatically where required. Changes made are documented within the ACL description.</li>
		<li>The new ui action "DataSilos Access Analysis" helps DataSilos manager users to explain why a user can or cannot see a record.</li>
		<li>Removed scheduled job "DataSilos - CreateTestData".</li>
		<li>The function CreateTestData() is now available from all scopes and can be used to create records for demos, manual testing and automated testing scenarios.</li>
		<li>Table specific application menu modules have been removed and the test step configuration "DataSilos - Check table implementation" no longer checks for table specific application menu modules. The status page contains all the table specific links.</li>
		<li>Renamed function GetOptimizationStatus() to GetStatusPerformance().</li>
		<li>The "Options" area is now split up between general settings in "Options" and ITSM table specific options at "ITSM Options".</li>
		<li>Added function RecordCheckFilter() to check if the record's filter criteria would allow a user to access a record ignoring the user's roles.</li>
		<li>Added function RecordCheckAccess() to check if the record's filter criteria would allow a user to access a record considering the user's roles.</li>	
	</ol>

	
	<h3>2.10.0 - 2021-09-22</h3>
	<ol>
		<li>DataSilos has been fully tested on Rome.</li>
		<li>Orlando is no longer actively supported.</li>
		<li>DevTools 1.24.0 is now required.</li>
		<li>Introduced extension point instance for "DevTools" to support the "Up" button on silo-to-group mapping record forms.</li>
		<li>Added "DataSilos - DevTools" child test suite to the "DataSilos" test suite so that all relevant tests can be run in one go.</li>
		<li>Missing ACLs are now added into the global scope (instead of DataSilos) by MaintenanceACLs().</li>
		<li>AccessAnalysis() is now available from all application scopes and provides information on which user may see which records - but not yet why.</li>
		<li>AppInstall() is now available from all application scopes.</li>
		<li>AppInstall() now uses DevTools' InstallerAPI class for installation.</li>
		<li>Added function MaintenanceACLs() to encapsulate all ACL related configuration activities.</li>
		<li>GetOptimizationStatus() is now available from all application scopes.</li>
		<li>GetOptimizationStatus() now uses DevTools's PerformanceQueryMultiple() function.</li>
		<li>Updated installation instructions to always use AppInstall() to configure ACLs automatically.</li>
		<li>Updated installation instructions with the recommendation to use source control and to consider additional custom scoped apps that extend DataSilos' functionality.</li>
		<li>Updated installation instructions with specific guidance on database optimization.</li>
		<li>Updated installation instructions with guidance regarding records with data issues which cannot be updated during maintenance.</li>
		<li>Extended analysis agenda and added a story to verify that no unnessecary notifications are triggered by maintenance jobs.</li> 
		<li>Added a story to cover the work required to ensure that all records in all tables in scope can be updated by maintenance jobs.</li>
		<li>Refactored test "DataSilos - Test data sanity" to use the new test step config "DevTools - Check test data sanity".</li>
		<li>Now using DocumentationAPI.RenderSystemRequirements() function to automatically render system requirements including dependencies to other apps.</li>
		<li>The new function AppGetDependencies() now provides information about dependencies to other apps.</li>
		<li>The "Test Suite" module now point to the DataSilos test suite explicitly.</li>
	</ol>
	
	<h3>2.9.0 - 2021-06-30</h3>
	<ol>
		<li>DevTools 1.19.0 is now required.</li>
		<li>AppInstall() can now add missing ACLs and existing modify one-line scripts. The installation guide has been updated accordingly.</li>
		<li>Added function CheckACLScript() to check if an ACL script complies with DataSilos requirements. The function is being used in the test step configuration and the evolving yet experimental AppInstall() function.</li>
		<li>Added chapter "Protection mechanisms" to the documentation.</li>
		<li>The test step configuration "DataSilos - Check table implementation" no longer checks for a test step that checks for a cross scope configuration on tables as this is no longer required.</li>
		<li>The security clearance level query condition was added as a float value. This has been fixed. It is an integer value now.</li>
	</ol>

	
	<h3>2.8.2 - 2021-06-28</h3>
	<ol>
		<li>Fixed a bug in GetOptimizationStatus() leading to slightly incorrect queries to be checked for performance.</li>
		<li>Added incident model for the failing ATF test "DataSilos - Test data sanity".</li>
	</ol>
			
	<h3>2.8.1 - 2021-06-24</h3>
	<ol>
		<li>DevTools 1.18.0 is now required.</li>
		<li>Database views that use left joins are now supported.</li>
		<li>Duplicate business rules were created for database views if the database view name exceeded 28 characters. This has been fixed.</li>
		<li>DataSilosTestDataAPI.GetAllData() now also returns records from sys_db_view.</li> 
		<li>The test "DataSilos - incident - database_view" checks if the system property "com.snc.sla.engine.async". If it is set to true, some of the test case would fail and hence are ignored.</li>
	</ol>
			
			
	<h3>2.8.0 - 2021-06-21</h3>
	<ol>
		<li>DevTools 1.17.0 is now required.</li>
		<li>Added generic protection of database views including automatic configuration of required business rules and database view table fields.</li>
		<li>Added system property "database_views.active" to control if database views should be protected or not.</li>
		<li>Added module "DB Views" to show all database views and tables in scope.</li>
		<li>When distributing visibility between related records, the ghost flag was not considered - resulting in modifications of ghost records. This has been fixed.</li>
		<li>The test "DataSilos - incident - database views" now sets all required system properties to run the test.</li>
		<li>The test step configuration "DataSilos - Check table implementation" no longer checks for the run_as user and if the scheduled job is active.</li>
		<li>Added experimental function GetOptimizationStatus() to trigger and measure typical queries when modified by DataSilos. This function should help database administrators to apply suitable optimizations (like adding indices and query hints).</li>
		<li>Added steps in the installation guide for database level optimizations.</li>
		<li>Added stories to update and create new tests (manual and automated).</li>
		<li>Added documentation on why DataSilos might be the better solution.</li>
		<li>AppInstall() can now be executed directly from the application scope and runs MaintenanceDatabaseViews() to prepare database view protection.</li>
	</ol>
	
	<h3>2.7.0 - 2021-05-05</h3>
	<ol>
		<li>WARNING: New York is no longer actively supported.</li>
		<li>Added system property "avoid_expensive_queries" for all supported tables and extended the test step configuration "DataSilos - Check table implementation" to check for the property.</li>
		<li>Defined the sort order in module "Logs".</li>
		<li>Added view "DataSilos" for scheduled jobs to show the "Run as" field.</li>
		<li>The Status page now displays the backmarker correctly for empty tables.</li>
		<li>Added stories for group and silo setup to the documentation.</li>
		<li>Added stories and extended installation manual to consider technical users for scheduled jobs.</li>
		<li>Added public function AppSetProperty() to allow other scoped apps to configure DataSilos via scripts.</li>
		<li>Added internal function AppSetDefaults() to set all DataSilos system properties to their defaults to prepare a release.</li> 
		<li>DataSilos tables are now configured to allow cross scope configuration to enable further extensions of functionality.</li>
	</ol>
	
	<h3>2.6.0 - 2021-04-16</h3>
	<ol>
		<li>Added the "Status" page which provides an overview on the current configuration and state of the DataSilos application on a per table level.</li>
		<li>Added property x_snc_datasilos.maintenance.active to control if the maintenance jobs should run (i.e. do their job) or not.</li>
		<li>Renamed module "Table" to "ITSM" and added a new module "CORE" to contain core system tables like sys_user etc. - another step to allow for further extensions of DataSilos.</li> 
		<li>Performance optimization in GetGroupsFromUser() - special thanks to Pat Casey.</li>
		<li>Performance improvement in RecordUpdateWhitelistsFromGroupByTypes() for the case that there may be thousands of supervisor groups in a silo.</li>
		<li>All business rules responsible for whitelist population now run at order 10000 to avoid side-effects with other business rules which set fields that could impact filter rules.</li>
		<li>Extended test step configuration "DataSilos - Check table implementation" to check if the business rule order is set to 10000.</li>
		<li>Using DevTools' GetGroupsFromUser() as the group filter is now part of DevTools.</li> 
		<li>GetGroupsFromUser() is now public so that it can be used by other scoped apps.</li>
		<li>Improved the code in the maintenance jobs and extended the test step configuration "DataSilos - Check table implementation" to enforce the change in future implementations.</li>
		<li>Extended runbook section in the documentation with several incident models.</li>
		<li>Added more stories to the documentation.</li>
	</ol>

	<h3>2.5.1 - 2021-03-22</h3>
	<ol>
		<li>Fixed a defect in the test step configuration "DataSilos - Check table implementation".</li>
		<li>Updated documentation on the last maintenance field.</li>
	</ol>
	
	<h3>2.5.0 - 2021-03-22</h3>
	<ol>
		<li>Madrid is no longer supported.</li>
		<li>DevTools version 1.12.2 or higher is required.</li>
		<li>Due to a potential platform defect, some removed ACLs might still be present after an update to DataSilos 2.5.0. This will cause the "DataSilos - Implementation" test to fail. Run the following script in GLOBAL scope to remove the useless ACLs:
			<pre>
var grSSA = new GlideRecord('sys_security_acl');
grSSA.addQuery('sys_scope','=','dafbffebdbb78450ba15a353059619eb');
grSSA.addQuery('name','CONTAINS','.');
grSSA.query();
while (grSSA.next())
{
	if (grSSA.operation == 'delete' || grSSA.operation == 'create')
	{   
		gs.info('Deleting ACL: '+grSSA.name+' / '+grSSA.operation+' / '+grSSA.sys_id);
		grSSA.deleteRecord();
	}
}				
			</pre>
		</li>
		<li>For unknown reasons a duplicate of ACL "change_request.x_snc_datasilos_security_clearance" for the "write" operation exist after an update to DataSilos 2.5.0 on some instances. The duplicate must be deleted (Eventually the sys_id is db149778dbeee010ba15a3530596191a but it may also differ). Make sure that the remaining ACL requires the x_snc_datasilos.manager role.</li>
		<li>WARNING: The interface of the Maintenance() function changed. Introduced a new table maintenance mechanism based on the DevTools function RecordBulkProcessor(). A new field is introduced on all tables in scope: "Last Maintenance" which stores the point in time when the record has been "maintained" for the last time. New scheduled scripts have been introduced to maintain each table separately.</li>
		<li>The warning message on the ACL form is now displayed in red (instead of blue).</li> 
		<li>Extended test "DataSilos - Test data sanity" to cover all supported tables.</li>
		<li>Extended test step configuration to check for a table specific test step in test "DataSilos - Test data sanity".</li>
		<li>Extended test step configuration "DataSilos - Check table implementation" to support table implementations in other application scopes. That is a first step to enable scoped apps to serve as DataSilos plugins.</li>
		<li>Extended test step configuration "DataSilos - Check table implementation" to check if there is a test step to check if ACLs have been properly configured for a supported table.</li>
		<li>Extended test step configuration "DataSilos - Check table implementation" to check if there is a test step to check the configuration of cross scope access for a supported table.</li>
		<li>Extended test step configuration "DataSilos - Check table implementation" to check for the new "Last Maintenance" field in each table.</li>
		<li>Added test step configuration "DataSilos - Log test data" which can be used to log all data of relevant test data records to the test step output. That can help to debug failing ATF tests.</li>
		<li>Added function DataSilosTestDataAPI.GetAllData() and DataSilosTestDataAPI.GetAllDataSilos() to gather all relevant test data records.</li>
		<li>RecordAddGroupToWhitelist() is now accessible from all application scopes.</li>
		<li>RecordGetVisibilityHash() is now accessible from all application scopes.</li>
		<li>GetAllSupportedTables() is now accessible from all application scopes.</li>
		<li>GetGroupFilter() is now accessible from all application scopes.</li>
		<li>Added get and set functions for all DataSilos specific fields. This is to support table fields provided by multiple application scopes.</li>
		<li>Added stories for user, group and silo configuration automation to the documentation.</li>
		<li>Improved installation guide: Added information on what can be done in case of failing ATFs.</li>
	</ol>
	
	
	<h3>2.4.0 - 2021-02-26</h3>
	<ol>
		<li>Added support for Quebec.</li>
		<li>DevTools version 1.10.0 or higher is required.</li>
		<li>Added support for security clearance levels. In addition to the organizational dimension, access to records can now also be controlled based on security clearance levels. Each record and user has a security clearance level. A user can only access a record if their security clearance level is equal or higher than the record's security clearance level.</li>
		<li>The explicit check for Performance Analytics views has been replaced by a more generic check for queries starting with "sys_idIN". This will consider any query that comes with a defined list of records as not expensive.</li>
		<li>In the data silos to group mapping table the data silo, group and type fields are now mandatory to prevent the entry of incomplete mapping records.</li>
		<li>Renamed module "Import/Export" to "Groups to Silos". This is to clear the way for a potential upcoming feature to manage silo to silo relationships.</li>
		<li>Added experimental function AccessAnalysis() to check if and why users may see records.</li>
		<li>Removed unnecessary logging in DataSilosTestDataAPI.</li>
		<li>Fixed function GetSilosFromUser().</li>
		<li>Fixed function GetSilosFromUserbyTypes() - a crash might be caused by incomplete silo-to-group mappings.</li>
		<li>Fixed configuration of some DataSilos specific field ACLs.</li>
		<li>The test step configuration "DataSilos - Check Business Rule" has been renamed to "DataSilos - Check table implementation" and several checks have been added to make sure that the implementation for a given table is complete.</li>
		<li>Added more user stories to the documentation.</li>
		<li>Improved installation guide.</li>
		<li>Added a short description for the scoped application.</li>
	</ol>
	
	<h3>2.3.0 - 2021-01-22</h3>
	<ol>
		<li>DevTools version 1.8.0 or higher is required.</li>
		<li>ExecuteACL can now handle the case that an incomplete record is presented to the ACL (Refer to&#160;<a href="https://support.servicenow.com/kb?id=kb_article_view&amp;sysparm_article=KB0529493" target="_blank">KB0529493</a>).</li>
		<li>If a request is triggered from a performance analytics view, we don't consider it expensive and will not apply the expensive query optimization.</li> 
		<li>Added the user stories section to the documentation.</li>
		<li>Added the runbook section to the documentation with a first incident model on failing integrations.</li>
		<li>Extended the analysis section with insights from previous projects in the documentation.</li>
		<li>Using DevTools' DocumentationAPI to auto-generate parts of the documentation.</li>
	</ol>
	
	
	<h3>2.2.0 - 2020-11-27</h3>
	<ol>
		<li>DevTools version 1.5.0 or higher is required.</li>
		<li>The Maintenance() function now supports a callback function to enable customized behavior when processing records.</li>
		<li>The Maintenance() function now supports to select a "window" of records to be processed to support multiple instances of scheduled jobs to run in parallel.</li>
		<li>The Maintenance() function no longer calls the RecordUpdate() function for records that have the ghost flag set to true. However, if a callback function is provided, the function is always called. Which means the callback function is responsible to check the ghost flag if needed.</li>
		<li>Improved log output of the Maintenance() function.</li>
		<li>Extended installation guide on how to troubleshoot failing tests.</li>
		<li>App sanity: All system properties have is_private set to false.</li>
		<li>App sanity: All ATF tests now have copied_from set to none.</li>
		<li>Added the ATF test "App sanity" to check for common pitfalls in scoped applications (like the two above).</li>
		<li>Added the ATF test "Test data sanity" to check if there is test data left from earlier test runs.</li>
	</ol>
	<h3>2.1.0 - 2020-11-16</h3>
	<ol>
		<li>Added a warning message when editing ACLs. The warning message can be configured via system properties.</li>
		<li>ExecuteACL() did not check if DataSilos filtering is globally active or not. This has been fixed.</li>
	</ol>
	<h3>2.0.0 - 2020-11-11</h3>
	<ol>
		<li>WARNING: The property x_snc_datasilos.incident.whitelist_trigger_fields has essentially be renamed to x_snc_datasilos.tables.incident.columns.whitelist_trigger.sys_user_group! Make sure to redo the configuration during upgrade!</li>
		<li>WARNING: The property x_snc_datasilos.active now controls the filter ONLY. It will no longer halt the population of the whitelists. As a result, it can now be more effectively used as an ON/OFF switch while preparing a go-live or during trouble shooting - without any negative impact on the whitelists of records that are changed in the meantime.</li>
		<li>WARNING: It is now required to configure ACLs not only for&#160;<b>table_name.*</b>,&#160;but also for&#160;<b>table_name</b>,&#160;. Updated the "ACLs" module and tests accordingly.</li>
		<li>WARNING: The business rules are now part of the scoped application. Any existing "DataSilos" business rules in the global scope should be removed!</li>
		<li>DevTools version 1.3.0 or higher is required.</li>
		<li>Introduced the supervisor datasilo whitelist field to enable silo-based whitelists for supervisors.</li>
		<li>Introduced the global visibility flag for all tables.</li>
		<li>Introduced the ghost flag for all tables. If set to true whitelists are not updated when a record is changed.</li>
		<li>Introduced configurable group filter. An encoded query can now be configured to control which groups should be considered for whitelist population.</li>
		<li>Introduced the option to avoid expensive queries. When the system property x_snc_datasilos.tables.<b>table_name</b>.avoid_expensive_queries is set to true, queries that do not contain a filter for active records are not altered. This results in users seeing a message that some records have been filtered from the result set and eventually empty result pages.</li>
		<li>The test "DataSilos - incident - cross-silo" now impersonates a user of the current assignment group before re-assigning the incident. This change was made to consider strict customer-specific customizations.</li>
		<li>Several script includes have been opened up for use from different scopes to enable implementation of customer specific Maintenance() functions and business rules.</li>
		<li>Extended the "Business Rules" module to show all before query business rules for the supported tables.</li> 
		<li>Optimized ExecuteACL() so that it does not evaluate the access restrictions for a single record multiple times.</li>
		<li>Introduced the use of customized test step configurations.</li>
		<li>Extended the Developer Guide: The DataSilos API Reference has been added and "Scope Extension" chapter has been refined.</li> 
		<li>Moved all contents from the "Requirement Analysis" chapter into the "Implementation Guide", added process relevant considerations.</li>
	</ol>
	<h3>1.4.0 - 2020-07-30</h3>
	<ol>
		<li>DevTools version must be 1.2.1.</li>
		<li>Existence and version of DevTools is now checked in ATF "DataSilos - installation".</li>
		<li>Introduced the global visibility flag for the incident table. If set to true, everyone can see this particular record.</li>
		<li>Reactivated the "Log" module.</li>
		<li>The module "Maintenance" has been replaced by the "Scheduled Jobs" module and shows all scheduled script executions where the name contains "DataSilos".</li>
		<li>The module "Business rules" now shows all business rules that contain "DataSilos" in their name - this is to consider customer's naming conventions with prefixes.</li>
		<li>A bug in the Madrid release caused issues in some navigation modules preventing pre-defined filters to work properly. This has been fixed.</li>
	</ol>
	<h3>1.3.0 - 2020-07-16</h3>
	<ol>
		<li>Introduced the configurable whitelist_trigger_field option. By setting the table specific option (e.g. x_snc_datasilos.incident.whitelist_trigger_field) the fields that should be used to populate the whitelist can be explicitly configured. If the option is empty the default for each table based on the task table is the assignment_group field. However, any other field that contains a reference to a group can be used. Dot-walking is NOT yet supported, though.</li> 
		<li>Introduced the maintenance.log_frequency option to control how often the maintenance script should log the current progress.</li>
		<li>Deactivated the Log module for the time being.</li>
	</ol>
	<h3>1.2.2 - 2020-07-15</h3>
	<ol>
		<li>The Maintenance script now explicitly checks the related tables, too. So *task records which are not associated to other whitelisted records are now whitelisted based on their assignment groups.</li>
		<li>Improved logging in the Maintenance script: Only the start and the end of the execution (with a consolidated summary) is logged.</li> 
		<li>Extended the developer guide with more details.</li>
		<li>Added the "Rollback" section to the implementation guide.</li>
		<li>Added a navigation module to show all silo to group associations.</li>
	</ol>
	<h3>1.2.1 - 2020-07-08</h3>
	<ol>
		<li>Users can now access request items where the associated request is opened on their behalf.</li>
		<li>Fixed issues on access rights to the admin and management navigation modules.</li>
	</ol>
	<h3>1.2.0 - 2020-07-07</h3>
	<ol>
		<li>Added support for Service Catalog Requests.</li>
		<li>Restructured the installation guide. It is now an implementation guide covering analysis, installation, configuration, and the verification phase.</li>
	</ol>
	<h3>1.1.3 - 2020-07-06</h3>
	<ol>
		<li>Related items (e.g. problem_task) did not apply the whitelist to their parents when created. This has been fixed.</li>
	</ol>
	<h3>1.1.2 - 2020-07-04</h3>
	<ol>
		<li>Added modules to show all supported tables with the fields relevant for visibility - a useful treat for data silo managers and developers.</li>
	</ol>
	<h3>1.1.1 - 2020-07-04</h3>
	<ol>
		<li>Extended "DataSilos - Installation" test to check if all business rules and ACLs have been set up correctly.</li>
		<li>Updated developer guide to update the "DataSilos - Installation" test.</li>
		<li>Updated installation guide on how to deal with erroneously created ACLs in the application scope.</li>
		<li>Test "DataSilos - Maintenance" is now Madrid compatible</li>
	</ol>
	<h3>1.1.0 - 2020-07-03</h3>
	<ol>
		<li>Added support for problem and problem_task tables.</li>
		<li>Users that are referenced in a change_request in the requested_by field can see that change request.</li>
		<li>Updated documentation: What happens if a user does not have any roles?</li>
	</ol>
	<h3>1.0.0 - 2020-06-23</h3>
	<p>First baselined version with support for incidents and change requests.</p>
<span style="visibility: hidden;">_CUT_HERE_</span>
</div>
</j:jelly>]]></html>
        <name>manual</name>
        <processing_script/>
        <sys_class_name>sys_ui_page</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2020-04-07 13:52:45</sys_created_on>
        <sys_id>1c4102d5db889c50ba15a353059619a2</sys_id>
        <sys_mod_count>686</sys_mod_count>
        <sys_name>manual</sys_name>
        <sys_package display_value="DataSilos WORK IN PROGRESS" source="x_snc_datasilos">dafbffebdbb78450ba15a353059619eb</sys_package>
        <sys_policy/>
        <sys_scope display_value="DataSilos WORK IN PROGRESS">dafbffebdbb78450ba15a353059619eb</sys_scope>
        <sys_update_name>sys_ui_page_1c4102d5db889c50ba15a353059619a2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-04-28 08:52:47</sys_updated_on>
    </sys_ui_page>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>1c4102d5db889c50ba15a353059619a2</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-04-08 08:21:49</sys_created_on>
        <sys_id>ce872d1193702a10959b7fda2bba10f4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-04-08 08:21:49</sys_updated_on>
        <table>sys_ui_page</table>
        <use_es_latest>false</use_es_latest>
    </sys_es_latest_script>
</record_update>
